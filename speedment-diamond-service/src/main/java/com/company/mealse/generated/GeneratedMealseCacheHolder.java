package com.company.mealse.generated;

import com.company.mealse.Mealse;
import com.company.mealse.MealseEntityStoreSerializerImpl;
import com.company.mealse.MealseManager;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.common.tuple.Tuple2;
import com.speedment.common.tuple.Tuples;
import com.speedment.enterprise.datastore.runtime.entitystore.EntityStore;
import com.speedment.enterprise.datastore.runtime.entitystore.EntityStoreHolder;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache.OfComparable;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache.OfLong;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache.OfString;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache;
import com.speedment.enterprise.datastore.runtime.fieldcache.MultiFieldCache;
import com.speedment.enterprise.datastore.runtime.statistic.Statistics;
import com.speedment.enterprise.datastore.runtime.util.DataStoreHolderUtil;
import com.speedment.enterprise.datastore.runtime.util.StatisticsUtil;
import com.speedment.runtime.bulk.PersistOperation;
import com.speedment.runtime.bulk.RemoveOperation;
import com.speedment.runtime.bulk.UpdateOperation;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.ColumnLabel;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.component.StreamSupplierComponent;
import com.speedment.runtime.field.Field;
import com.speedment.runtime.field.trait.HasIdentifier;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.stream.Stream;

import static java.util.Objects.requireNonNull;
import static java.util.stream.Collectors.toMap;
import static java.util.stream.Collectors.toSet;

/**
 * A holder class for the various caches that are used to speed up the {@link
 * MealseManager}.
 * 
 * Generated by
 * com.speedment.enterprise.datastore.generator.internal.code.GeneratedEntityCacheHolderTranslator
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public final class GeneratedMealseCacheHolder implements EntityStoreHolder<Mealse> {
    
    private final EntityStore<Mealse> entityStore;
    private final OfLong fieldIdCache;
    private final OfString fieldDescriptionCache;
    private final OfString fieldNameCache;
    private final OfComparable<BigDecimal> fieldPriceCache;
    
    public GeneratedMealseCacheHolder(
            EntityStore<Mealse> entityStore,
            OfLong fieldIdCache,
            OfString fieldDescriptionCache,
            OfString fieldNameCache,
            OfComparable<BigDecimal> fieldPriceCache) {
        
        this.entityStore           = requireNonNull(entityStore);
        this.fieldIdCache          = requireNonNull(fieldIdCache);
        this.fieldDescriptionCache = requireNonNull(fieldDescriptionCache);
        this.fieldNameCache        = requireNonNull(fieldNameCache);
        this.fieldPriceCache       = requireNonNull(fieldPriceCache);
    }
    
    @Override
    public EntityStore<Mealse> getEntityStore() {
        return entityStore;
    }
    
    @Override
    @SuppressWarnings("unchecked")
    public <CACHE extends FieldCache<CACHE>> CACHE getFieldCache(ColumnIdentifier<Mealse> columnId) {
        if (columnId instanceof Mealse.Identifier) {
            final Mealse.Identifier _id = (Mealse.Identifier) columnId;
            switch (_id) {
                case ID          : return (CACHE) fieldIdCache;
                case DESCRIPTION : return (CACHE) fieldDescriptionCache;
                case NAME        : return (CACHE) fieldNameCache;
                case PRICE       : return (CACHE) fieldPriceCache;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = columnId.getColumnId();
            switch (_colName) {
                case "id"          : return (CACHE) fieldIdCache;
                case "description" : return (CACHE) fieldDescriptionCache;
                case "name"        : return (CACHE) fieldNameCache;
                case "price"       : return (CACHE) fieldPriceCache;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public boolean isHavingMultiFieldCache(ColumnIdentifier<Mealse> columnId) {
        return false;
    }
    
    public static CompletableFuture<GeneratedMealseCacheHolder> reload(StreamSupplierComponent streamSupplier, ExecutorService executor) {
        return reload(DataStoreHolderUtil.buildEntityStore(
            streamSupplier,
            executor,
            MealseEntityStoreSerializerImpl::new,
            TableIdentifier.of("diamonds", "diamonds", "mealse")
        ), executor);
    }
    
    @Override
    public EntityStoreHolder<Mealse> recycleAndPersist(PersistOperation<Mealse> persistOperation) {
        return wrapped().recycleAndPersist(persistOperation);
    }
    
    @Override
    public EntityStoreHolder<Mealse> recycleAndRemove(RemoveOperation<Mealse> removeOperation) {
        return wrapped().recycleAndRemove(removeOperation);
    }
    
    @Override
    public EntityStoreHolder<Mealse> recycleAndUpdate(UpdateOperation<Mealse> updateOperation) {
        return wrapped().recycleAndUpdate(updateOperation);
    }
    
    private EntityStoreHolder<Mealse> wrapped() {
        // Use explicit type for Stream to improve compilation time.
        final Map<ColumnLabel, FieldCache<?>> fieldCaches = Stream.<Tuple2<HasIdentifier<Mealse>, FieldCache<?>>>of(
            Tuples.of(Mealse.ID,         fieldIdCache),
            Tuples.of(Mealse.DESCRIPTION,fieldDescriptionCache),
            Tuples.of(Mealse.NAME,       fieldNameCache),
            Tuples.of(Mealse.PRICE,      fieldPriceCache)
        )
            .collect(toMap(t2 -> t2.get0().identifier().label(), Tuple2::get1));
        final Map<ColumnLabel,  Map<ColumnLabel, MultiFieldCache<?, ?, ?>>>  multiFieldCaches = createMultiCacheMap();
        final Set<ColumnIdentifier<Mealse>> columnIdentifiers = Stream.<HasIdentifier<Mealse>>of(
            Mealse.ID,
            Mealse.DESCRIPTION,
            Mealse.NAME,
            Mealse.PRICE
        )
            .map(HasIdentifier::identifier)
            .collect(toSet());
        return EntityStoreHolder.of(
            entityStore,
            fieldCaches,
            multiFieldCaches,
            columnIdentifiers
        );
    }
    
    public static CompletableFuture<GeneratedMealseCacheHolder> reload(CompletableFuture<EntityStore<Mealse>> entityStoreFuture, ExecutorService executor) {
        final CompletableFuture<FieldCache.OfLong> fieldIdCacheFuture =
            DataStoreHolderUtil.buildLongCache(entityStoreFuture, executor, Mealse.ID, FieldCache.DISTINCT);
        
        final CompletableFuture<FieldCache.OfString> fieldDescriptionCacheFuture =
            DataStoreHolderUtil.buildStringCache(entityStoreFuture, executor, Mealse.DESCRIPTION, 0);
        
        final CompletableFuture<FieldCache.OfString> fieldNameCacheFuture =
            DataStoreHolderUtil.buildStringCache(entityStoreFuture, executor, Mealse.NAME, 0);
        
        final CompletableFuture<FieldCache.OfComparable<BigDecimal>> fieldPriceCacheFuture =
            DataStoreHolderUtil.buildComparableCache(entityStoreFuture, executor, Mealse.PRICE, 0);
        
        return entityStoreFuture.thenApplyAsync(entityStore -> {
            try {
                return new GeneratedMealseCacheHolder(
                    entityStore,
                    fieldIdCacheFuture.get(),
                    fieldDescriptionCacheFuture.get(),
                    fieldNameCacheFuture.get(),
                    fieldPriceCacheFuture.get()
                );
            } catch (final ExecutionException | InterruptedException ex) {
                throw new RuntimeException(ex);
            }
        });
    }
    
    @Override
    public void close() {
        entityStore.close();
        fieldIdCache.close();
        fieldDescriptionCache.close();
        fieldNameCache.close();
        fieldPriceCache.close();
    }
    
    @Override
    public Statistics getStatistics() {
        return StatisticsUtil.getStatistics(    
            this,
            entityStore.identifier(),
            Arrays.asList(
                Mealse.Identifier.ID,
                Mealse.Identifier.DESCRIPTION,
                Mealse.Identifier.NAME,
                Mealse.Identifier.PRICE
            )
        
        );
    }
    
    private Map<ColumnLabel, Map<ColumnLabel, MultiFieldCache<?, ?, ?>>> createMultiCacheMap() {
        return Collections.emptyMap();
    }
}