package com.company.mealse.generated;

import com.company.mealse.Mealse;
import com.company.mealse.MealseImpl;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.component.SqlAdapter;
import com.speedment.runtime.core.db.SqlFunction;

import java.sql.ResultSet;
import java.sql.SQLException;

import static com.speedment.common.injector.State.RESOLVED;

/**
 * The generated Sql Adapter for a {@link com.company.mealse.Mealse} entity.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedMealseSqlAdapter implements SqlAdapter<Mealse> {
    
    private final TableIdentifier<Mealse> tableIdentifier;
    
    protected GeneratedMealseSqlAdapter() {
        this.tableIdentifier = TableIdentifier.of("diamonds", "diamonds", "mealse");
    }
    
    protected Mealse apply(ResultSet resultSet, int offset) throws SQLException {
        return createEntity()
            .setId(          resultSet.getLong(1 + offset))
            .setDescription( resultSet.getString(2 + offset))
            .setName(        resultSet.getString(3 + offset))
            .setPrice(       resultSet.getBigDecimal(4 + offset))
            ;
    }
    
    protected MealseImpl createEntity() {
        return new MealseImpl();
    }
    
    @Override
    public TableIdentifier<Mealse> identifier() {
        return tableIdentifier;
    }
    
    @Override
    public SqlFunction<ResultSet, Mealse> entityMapper() {
        return entityMapper(0);
    }
    
    @Override
    public SqlFunction<ResultSet, Mealse> entityMapper(int offset) {
        return rs -> apply(rs, offset);
    }
}