package com.company.mealse.generated;

import com.company.mealse.Mealse;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.enterprise.datastore.runtime.field.DatastoreFields;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.ComparableField;
import com.speedment.runtime.field.LongField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;

import java.math.BigDecimal;
import java.util.Optional;

/**
 * The generated base for the {@link com.company.mealse.Mealse}-interface
 * representing entities of the {@code mealse}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedMealse {
    
    /**
     * This Field corresponds to the {@link Mealse} field that can be obtained
     * using the {@link Mealse#getId()} method.
     */
    LongField<Mealse, Long> ID = DatastoreFields.createLongField(
        Identifier.ID,
        Mealse::getId,
        Mealse::setId,
        TypeMapper.primitive(),
        true
    );
    /**
     * This Field corresponds to the {@link Mealse} field that can be obtained
     * using the {@link Mealse#getDescription()} method.
     */
    StringField<Mealse, String> DESCRIPTION = DatastoreFields.createStringField(
        Identifier.DESCRIPTION,
        o -> OptionalUtil.unwrap(o.getDescription()),
        Mealse::setDescription,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Mealse} field that can be obtained
     * using the {@link Mealse#getName()} method.
     */
    StringField<Mealse, String> NAME = DatastoreFields.createStringField(
        Identifier.NAME,
        o -> OptionalUtil.unwrap(o.getName()),
        Mealse::setName,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Mealse} field that can be obtained
     * using the {@link Mealse#getPrice()} method.
     */
    ComparableField<Mealse, BigDecimal, BigDecimal> PRICE = DatastoreFields.createComparableField(
        Identifier.PRICE,
        o -> OptionalUtil.unwrap(o.getPrice()),
        Mealse::setPrice,
        TypeMapper.identity(),
        false
    );
    
    /**
     * Returns the id of this Mealse. The id field corresponds to the database
     * column diamonds.diamonds.mealse.id.
     * 
     * @return the id of this Mealse
     */
    long getId();
    
    /**
     * Returns the description of this Mealse. The description field corresponds
     * to the database column diamonds.diamonds.mealse.description.
     * 
     * @return the description of this Mealse
     */
    Optional<String> getDescription();
    
    /**
     * Returns the name of this Mealse. The name field corresponds to the
     * database column diamonds.diamonds.mealse.name.
     * 
     * @return the name of this Mealse
     */
    Optional<String> getName();
    
    /**
     * Returns the price of this Mealse. The price field corresponds to the
     * database column diamonds.diamonds.mealse.price.
     * 
     * @return the price of this Mealse
     */
    Optional<BigDecimal> getPrice();
    
    /**
     * Sets the id of this Mealse. The id field corresponds to the database
     * column diamonds.diamonds.mealse.id.
     * 
     * @param id to set of this Mealse
     * @return   this Mealse instance
     */
    Mealse setId(long id);
    
    /**
     * Sets the description of this Mealse. The description field corresponds to
     * the database column diamonds.diamonds.mealse.description.
     * 
     * @param description to set of this Mealse
     * @return            this Mealse instance
     */
    Mealse setDescription(String description);
    
    /**
     * Sets the name of this Mealse. The name field corresponds to the database
     * column diamonds.diamonds.mealse.name.
     * 
     * @param name to set of this Mealse
     * @return     this Mealse instance
     */
    Mealse setName(String name);
    
    /**
     * Sets the price of this Mealse. The price field corresponds to the
     * database column diamonds.diamonds.mealse.price.
     * 
     * @param price to set of this Mealse
     * @return      this Mealse instance
     */
    Mealse setPrice(BigDecimal price);
    
    enum Identifier implements ColumnIdentifier<Mealse> {
        
        ID          ("id"),
        DESCRIPTION ("description"),
        NAME        ("name"),
        PRICE       ("price");
        
        private final String columnId;
        private final TableIdentifier<Mealse> tableIdentifier;
        
        Identifier(String columnId) {
            this.columnId        = columnId;
            this.tableIdentifier = TableIdentifier.of(    getDbmsId(), 
                getSchemaId(), 
                getTableId());
        }
        
        @Override
        public String getDbmsId() {
            return "diamonds";
        }
        
        @Override
        public String getSchemaId() {
            return "diamonds";
        }
        
        @Override
        public String getTableId() {
            return "mealse";
        }
        
        @Override
        public String getColumnId() {
            return this.columnId;
        }
        
        @Override
        public TableIdentifier<Mealse> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}