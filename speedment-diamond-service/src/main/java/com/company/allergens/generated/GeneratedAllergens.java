package com.company.allergens.generated;

import com.company.allergens.Allergens;
import com.company.mealse.Mealse;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.common.function.OptionalBoolean;
import com.speedment.enterprise.datastore.runtime.field.DatastoreFields;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.ComparableField;
import com.speedment.runtime.field.LongForeignKeyField;
import com.speedment.runtime.typemapper.TypeMapper;

/**
 * The generated base for the {@link com.company.allergens.Allergens}-interface
 * representing entities of the {@code allergens}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedAllergens {
    
    /**
     * This Field corresponds to the {@link Allergens} field that can be
     * obtained using the {@link Allergens#getCelery()} method.
     */
    ComparableField<Allergens, Boolean, Boolean> CELERY = DatastoreFields.createComparableField(
        Identifier.CELERY,
        o -> OptionalUtil.unwrap(o.getCelery()),
        Allergens::setCelery,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Allergens} field that can be
     * obtained using the {@link Allergens#getPeanuts()} method.
     */
    ComparableField<Allergens, Boolean, Boolean> PEANUTS = DatastoreFields.createComparableField(
        Identifier.PEANUTS,
        o -> OptionalUtil.unwrap(o.getPeanuts()),
        Allergens::setPeanuts,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Allergens} field that can be
     * obtained using the {@link Allergens#getSesameSeeds()} method.
     */
    ComparableField<Allergens, Boolean, Boolean> SESAME_SEEDS = DatastoreFields.createComparableField(
        Identifier.SESAME_SEEDS,
        o -> OptionalUtil.unwrap(o.getSesameSeeds()),
        Allergens::setSesameSeeds,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Allergens} field that can be
     * obtained using the {@link Allergens#getMealId()} method.
     */
    LongForeignKeyField<Allergens, Long, Mealse> MEAL_ID = DatastoreFields.createLongForeignKeyField(
        Identifier.MEAL_ID,
        Allergens::getMealId,
        Allergens::setMealId,
        Mealse.ID,
        TypeMapper.primitive(),
        true
    );
    
    /**
     * Returns the celery of this Allergens. The celery field corresponds to the
     * database column diamonds.diamonds.allergens.celery.
     * 
     * @return the celery of this Allergens
     */
    OptionalBoolean getCelery();
    
    /**
     * Returns the peanuts of this Allergens. The peanuts field corresponds to
     * the database column diamonds.diamonds.allergens.peanuts.
     * 
     * @return the peanuts of this Allergens
     */
    OptionalBoolean getPeanuts();
    
    /**
     * Returns the sesameSeeds of this Allergens. The sesameSeeds field
     * corresponds to the database column
     * diamonds.diamonds.allergens.sesame_seeds.
     * 
     * @return the sesameSeeds of this Allergens
     */
    OptionalBoolean getSesameSeeds();
    
    /**
     * Returns the mealId of this Allergens. The mealId field corresponds to the
     * database column diamonds.diamonds.allergens.meal_id.
     * 
     * @return the mealId of this Allergens
     */
    long getMealId();
    
    /**
     * Sets the celery of this Allergens. The celery field corresponds to the
     * database column diamonds.diamonds.allergens.celery.
     * 
     * @param celery to set of this Allergens
     * @return       this Allergens instance
     */
    Allergens setCelery(Boolean celery);
    
    /**
     * Sets the peanuts of this Allergens. The peanuts field corresponds to the
     * database column diamonds.diamonds.allergens.peanuts.
     * 
     * @param peanuts to set of this Allergens
     * @return        this Allergens instance
     */
    Allergens setPeanuts(Boolean peanuts);
    
    /**
     * Sets the sesameSeeds of this Allergens. The sesameSeeds field corresponds
     * to the database column diamonds.diamonds.allergens.sesame_seeds.
     * 
     * @param sesameSeeds to set of this Allergens
     * @return            this Allergens instance
     */
    Allergens setSesameSeeds(Boolean sesameSeeds);
    
    /**
     * Sets the mealId of this Allergens. The mealId field corresponds to the
     * database column diamonds.diamonds.allergens.meal_id.
     * 
     * @param mealId to set of this Allergens
     * @return       this Allergens instance
     */
    Allergens setMealId(long mealId);
    
    /**
     * Queries the specified manager for the referenced Mealse. If no such
     * Mealse exists, an {@code NullPointerException} will be thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    Mealse findMealId(Manager<Mealse> foreignManager);
    
    enum Identifier implements ColumnIdentifier<Allergens> {
        
        CELERY       ("celery"),
        PEANUTS      ("peanuts"),
        SESAME_SEEDS ("sesame_seeds"),
        MEAL_ID      ("meal_id");
        
        private final String columnId;
        private final TableIdentifier<Allergens> tableIdentifier;
        
        Identifier(String columnId) {
            this.columnId        = columnId;
            this.tableIdentifier = TableIdentifier.of(    getDbmsId(), 
                getSchemaId(), 
                getTableId());
        }
        
        @Override
        public String getDbmsId() {
            return "diamonds";
        }
        
        @Override
        public String getSchemaId() {
            return "diamonds";
        }
        
        @Override
        public String getTableId() {
            return "allergens";
        }
        
        @Override
        public String getColumnId() {
            return this.columnId;
        }
        
        @Override
        public TableIdentifier<Allergens> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}