package com.company.allergens.generated;

import com.company.allergens.Allergens;
import com.company.allergens.AllergensImpl;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.component.SqlAdapter;
import com.speedment.runtime.core.db.SqlFunction;

import java.sql.ResultSet;
import java.sql.SQLException;

import static com.speedment.common.injector.State.RESOLVED;
import static com.speedment.runtime.core.util.ResultSetUtil.*;

/**
 * The generated Sql Adapter for a {@link com.company.allergens.Allergens}
 * entity.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedAllergensSqlAdapter implements SqlAdapter<Allergens> {
    
    private final TableIdentifier<Allergens> tableIdentifier;
    
    protected GeneratedAllergensSqlAdapter() {
        this.tableIdentifier = TableIdentifier.of("diamonds", "diamonds", "allergens");
    }
    
    protected Allergens apply(ResultSet resultSet, int offset) throws SQLException {
        return createEntity()
            .setCelery(      getBoolean(resultSet, 1 + offset))
            .setPeanuts(     getBoolean(resultSet, 2 + offset))
            .setSesameSeeds( getBoolean(resultSet, 3 + offset))
            .setMealId(      resultSet.getLong(4 + offset))
            ;
    }
    
    protected AllergensImpl createEntity() {
        return new AllergensImpl();
    }
    
    @Override
    public TableIdentifier<Allergens> identifier() {
        return tableIdentifier;
    }
    
    @Override
    public SqlFunction<ResultSet, Allergens> entityMapper() {
        return entityMapper(0);
    }
    
    @Override
    public SqlFunction<ResultSet, Allergens> entityMapper(int offset) {
        return rs -> apply(rs, offset);
    }
}