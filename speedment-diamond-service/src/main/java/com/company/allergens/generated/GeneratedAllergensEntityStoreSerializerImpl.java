package com.company.allergens.generated;

import com.company.allergens.Allergens;
import com.company.allergens.AllergensImpl;
import com.company.mealse.Mealse;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.common.function.BiLongToIntFunction;
import com.speedment.common.function.LongToBooleanFunction;
import com.speedment.common.function.LongToByteFunction;
import com.speedment.common.function.LongToCharFunction;
import com.speedment.common.function.LongToFloatFunction;
import com.speedment.common.function.LongToShortFunction;
import com.speedment.enterprise.datastore.runtime.DataStoreHolder;
import com.speedment.enterprise.datastore.runtime.entitystore.EntityStoreSerializer;
import com.speedment.enterprise.datastore.runtime.entitystore.function.EntityStoreComparator;
import com.speedment.enterprise.datastore.runtime.entitystore.function.EntityStoreCompareTo;
import com.speedment.enterprise.datastore.runtime.entitystore.function.EntityStorePredicate;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache;
import com.speedment.enterprise.datastore.runtime.util.SerializerUtil;
import com.speedment.runtime.config.identifier.ColumnIdentifier;

import java.nio.ByteBuffer;
import java.util.List;
import java.util.function.BiConsumer;
import java.util.function.LongConsumer;
import java.util.function.LongFunction;
import java.util.function.LongPredicate;
import java.util.function.LongToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongUnaryOperator;

import static java.util.Collections.singletonList;
import static java.util.Objects.requireNonNull;
import static java.util.stream.Collectors.joining;

/**
 * Serializes and deserializes instances of Allergens.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedAllergensEntityStoreSerializerImpl implements EntityStoreSerializer<Allergens> {
    
    private final LongFunction<ByteBuffer> bufferFinder;
    private final LongToIntFunction offsetFinder;
    private static final int BITMAP_BEGINS = 0;
    private static final int BITMAP_CELERY = 0;
    private static final int BITMAP_PEANUTS = 0;
    private static final int BITMAP_SESAME_SEEDS = 0;
    private static final int FIELD_MEAL_ID = 1;
    private static final int FKREF_FK7CDEE7SGL8YLG1RK9QYJLXBTS = 9;
    private static final int VARSIZE_BEGINS = 17;
    
    protected GeneratedAllergensEntityStoreSerializerImpl(final LongFunction<ByteBuffer> bufferFinder, final LongToIntFunction offsetFinder) {
        this.bufferFinder = requireNonNull(bufferFinder);
        this.offsetFinder = requireNonNull(offsetFinder);
    }
    
    @Override
    public BiConsumer<ByteBuffer, Allergens> serializer() {
        return (buffer, entity) -> {
            buffer.put(BITMAP_BEGINS, (byte) 0);
            byte bitmap0 = (byte) 0;
            
            if (!entity.getCelery().isPresent()) {
                bitmap0 |= 0b10;
            } else if (entity.getCelery().getAsBoolean()) {
                bitmap0 |= 0b1;
            }
            if (!entity.getPeanuts().isPresent()) {
                bitmap0 |= 0b1000;
            } else if (entity.getPeanuts().getAsBoolean()) {
                bitmap0 |= 0b100;
            }
            if (!entity.getSesameSeeds().isPresent()) {
                bitmap0 |= 0b100000;
            } else if (entity.getSesameSeeds().getAsBoolean()) {
                bitmap0 |= 0b10000;
            }
            buffer.putLong(FIELD_MEAL_ID, entity.getMealId());
            buffer.putLong(FKREF_FK7CDEE7SGL8YLG1RK9QYJLXBTS, -1L); // Will be set later on in the decorator()-method.
            buffer.put(BITMAP_BEGINS, bitmap0);
            
            buffer.position(0);
            buffer.limit(VARSIZE_BEGINS);
        };
    }
    
    @Override
    public LongConsumer decorator(DataStoreHolder holder) {
        final FieldCache.OfLong mealse_idFieldCache = holder.getFieldCache(Mealse.ID.identifier());
        final LongUnaryOperator mealIdDeserializer = longDeserializer(Allergens.MEAL_ID.identifier());
        final LongUnaryOperator fk7cdee7sgl8ylg1rk9qyjlxbtsResolver = ref -> {
            final long value = mealIdDeserializer.applyAsLong(ref);
            return mealse_idFieldCache.any(value);
        };
        return ref -> {
            final ByteBuffer buffer = bufferFinder.apply(ref);
            final int rowOffset = offsetFinder.applyAsInt(ref);
            buffer.putLong(rowOffset + FKREF_FK7CDEE7SGL8YLG1RK9QYJLXBTS, fk7cdee7sgl8ylg1rk9qyjlxbtsResolver.applyAsLong(ref));
        };
    }
    
    @Override
    public LongFunction<Allergens> deserializer() {
        return ref -> {
            final ByteBuffer buffer = bufferFinder.apply(ref);
            final int offset = offsetFinder.applyAsInt(ref);
            final Allergens entity = new AllergensImpl();
            if ((buffer.get(offset + BITMAP_CELERY) & 0b10) == 0) {
                entity.setCelery((buffer.get(offset + BITMAP_CELERY) & 0b1) != 0);
            }
            if ((buffer.get(offset + BITMAP_PEANUTS) & 0b1000) == 0) {
                entity.setPeanuts((buffer.get(offset + BITMAP_PEANUTS) & 0b100) != 0);
            }
            if ((buffer.get(offset + BITMAP_SESAME_SEEDS) & 0b100000) == 0) {
                entity.setSesameSeeds((buffer.get(offset + BITMAP_SESAME_SEEDS) & 0b10000) != 0);
            }
            entity.setMealId(buffer.getLong(offset + FIELD_MEAL_ID));
            return entity;
        };
    }
    
    @Override
    public Class<?> deserializedType(final ColumnIdentifier<Allergens> colId) {
        if (colId instanceof Allergens.Identifier) {
            final Allergens.Identifier _id = (Allergens.Identifier) colId;
            switch (_id) {
                case CELERY       : 
                case PEANUTS      : 
                case SESAME_SEEDS : return boolean.class;
                case MEAL_ID      : return long.class;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "celery"       : 
                case "peanuts"      : 
                case "sesame_seeds" : return boolean.class;
                case "meal_id"      : return long.class;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public <FK_ENTITY> LongUnaryOperator finder(final ColumnIdentifier<Allergens> colId, final ColumnIdentifier<FK_ENTITY> fkColId) {
        return finder(singletonList(colId), singletonList(fkColId));
    }
    
    @Override
    public <FK_ENTITY> LongUnaryOperator finder(final List<ColumnIdentifier<Allergens>> cols, final List<ColumnIdentifier<FK_ENTITY>> fkCols) {
        final String fkName = SerializerUtil.uniqueFkName(cols, fkCols);
        switch (fkName) {
            case "{meal_id}->mealse{id}": return finder("FK7cdee7sgl8ylg1rk9qyjlxbts");
        }
        
        throw new IllegalArgumentException(
            fkName + " is not a valid foreign reference name."
        );
    }
    
    @Override
    public LongUnaryOperator finder(final String fkName) {
        switch (fkName) {
            case "FK7cdee7sgl8ylg1rk9qyjlxbts": return ref -> bufferFinder.apply(ref).getLong(offsetFinder.applyAsInt(ref) + FKREF_FK7CDEE7SGL8YLG1RK9QYJLXBTS);
        }
        
        throw new IllegalArgumentException(
            "Could not find a foreign key " + fkName + " in table 'allergens'."
        );
    }
    
    @Override
    public LongPredicate isNull(final ColumnIdentifier<Allergens> colId) {
        if (colId instanceof Allergens.Identifier) {
            final Allergens.Identifier _id = (Allergens.Identifier) colId;
            switch (_id) {
                case CELERY       : return ref -> (bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + BITMAP_CELERY) & 0b10) != 0;
                case PEANUTS      : return ref -> (bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + BITMAP_PEANUTS) & 0b1000) != 0;
                case SESAME_SEEDS : return ref -> (bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + BITMAP_SESAME_SEEDS) & 0b100000) != 0;
                case MEAL_ID      : return ALWAYS_FALSE;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "celery"       : return ref -> (bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + BITMAP_CELERY) & 0b10) != 0;
                case "peanuts"      : return ref -> (bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + BITMAP_PEANUTS) & 0b1000) != 0;
                case "sesame_seeds" : return ref -> (bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + BITMAP_SESAME_SEEDS) & 0b100000) != 0;
                case "meal_id"      : return ALWAYS_FALSE;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongPredicate isPresent(final ColumnIdentifier<Allergens> colId) {
        if (colId instanceof Allergens.Identifier) {
            final Allergens.Identifier _id = (Allergens.Identifier) colId;
            switch (_id) {
                case CELERY       : return ref -> (bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + BITMAP_CELERY) & 0b10) == 0;
                case PEANUTS      : return ref -> (bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + BITMAP_PEANUTS) & 0b1000) == 0;
                case SESAME_SEEDS : return ref -> (bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + BITMAP_SESAME_SEEDS) & 0b100000) == 0;
                case MEAL_ID      : return ALWAYS_TRUE;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "celery"       : return ref -> (bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + BITMAP_CELERY) & 0b10) == 0;
                case "peanuts"      : return ref -> (bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + BITMAP_PEANUTS) & 0b1000) == 0;
                case "sesame_seeds" : return ref -> (bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + BITMAP_SESAME_SEEDS) & 0b100000) == 0;
                case "meal_id"      : return ALWAYS_TRUE;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongToByteFunction byteDeserializer(final ColumnIdentifier<Allergens> colId) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type byte.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToShortFunction shortDeserializer(final ColumnIdentifier<Allergens> colId) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type short.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction intDeserializer(final ColumnIdentifier<Allergens> colId) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type int.", colId.getColumnId())
        );
    }
    
    @Override
    public LongUnaryOperator longDeserializer(final ColumnIdentifier<Allergens> colId) {
        if ("meal_id".equals(colId.getColumnId())) {
            return ref -> bufferFinder.apply(ref).getLong(offsetFinder.applyAsInt(ref) + FIELD_MEAL_ID);
        }
        
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type long.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToFloatFunction floatDeserializer(final ColumnIdentifier<Allergens> colId) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type float.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToDoubleFunction doubleDeserializer(final ColumnIdentifier<Allergens> colId) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type double.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToCharFunction charDeserializer(final ColumnIdentifier<Allergens> colId) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type char.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToBooleanFunction booleanDeserializer(final ColumnIdentifier<Allergens> colId) {
        if (colId instanceof Allergens.Identifier) {
            final Allergens.Identifier _id = (Allergens.Identifier) colId;
            switch (_id) {
                case CELERY       : return ref -> (bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + BITMAP_CELERY) & 0b1) != 0;
                case PEANUTS      : return ref -> (bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + BITMAP_PEANUTS) & 0b100) != 0;
                case SESAME_SEEDS : return ref -> (bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + BITMAP_SESAME_SEEDS) & 0b10000) != 0;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("The column '%s' is either unknown or not of type boolean.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "celery"       : return ref -> (bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + BITMAP_CELERY) & 0b1) != 0;
                case "peanuts"      : return ref -> (bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + BITMAP_PEANUTS) & 0b100) != 0;
                case "sesame_seeds" : return ref -> (bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + BITMAP_SESAME_SEEDS) & 0b10000) != 0;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("The column '%s' is either unknown or not of type boolean.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongFunction<?> objectDeserializer(final ColumnIdentifier<Allergens> colId) {
        throw new UnsupportedOperationException(
            String.format("Unknown column name '%s'.", colId.getColumnId())
        );
    }
    
    @Override
    public BiLongToIntFunction comparator(final ColumnIdentifier<Allergens> colId) {
        if (colId instanceof Allergens.Identifier) {
            final Allergens.Identifier _id = (Allergens.Identifier) colId;
            switch (_id) {
                case CELERY       : return (aRef, bRef) -> Integer.compare(
                    bufferFinder.apply(aRef).get(offsetFinder.applyAsInt(aRef) + BITMAP_CELERY) & 0b1,
                    bufferFinder.apply(bRef).get(offsetFinder.applyAsInt(bRef) + BITMAP_CELERY) & 0b1
                );
                case PEANUTS      : return (aRef, bRef) -> Integer.compare(
                    bufferFinder.apply(aRef).get(offsetFinder.applyAsInt(aRef) + BITMAP_PEANUTS) & 0b100,
                    bufferFinder.apply(bRef).get(offsetFinder.applyAsInt(bRef) + BITMAP_PEANUTS) & 0b100
                );
                case SESAME_SEEDS : return (aRef, bRef) -> Integer.compare(
                    bufferFinder.apply(aRef).get(offsetFinder.applyAsInt(aRef) + BITMAP_SESAME_SEEDS) & 0b10000,
                    bufferFinder.apply(bRef).get(offsetFinder.applyAsInt(bRef) + BITMAP_SESAME_SEEDS) & 0b10000
                );
                case MEAL_ID      : return (aRef, bRef) -> Long.compare(
                    bufferFinder.apply(aRef).getLong(offsetFinder.applyAsInt(aRef) + FIELD_MEAL_ID),
                    bufferFinder.apply(bRef).getLong(offsetFinder.applyAsInt(bRef) + FIELD_MEAL_ID)
                );
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "celery"       : return (aRef, bRef) -> Integer.compare(
                    bufferFinder.apply(aRef).get(offsetFinder.applyAsInt(aRef) + BITMAP_CELERY) & 0b1,
                    bufferFinder.apply(bRef).get(offsetFinder.applyAsInt(bRef) + BITMAP_CELERY) & 0b1
                );
                case "peanuts"      : return (aRef, bRef) -> Integer.compare(
                    bufferFinder.apply(aRef).get(offsetFinder.applyAsInt(aRef) + BITMAP_PEANUTS) & 0b100,
                    bufferFinder.apply(bRef).get(offsetFinder.applyAsInt(bRef) + BITMAP_PEANUTS) & 0b100
                );
                case "sesame_seeds" : return (aRef, bRef) -> Integer.compare(
                    bufferFinder.apply(aRef).get(offsetFinder.applyAsInt(aRef) + BITMAP_SESAME_SEEDS) & 0b10000,
                    bufferFinder.apply(bRef).get(offsetFinder.applyAsInt(bRef) + BITMAP_SESAME_SEEDS) & 0b10000
                );
                case "meal_id"      : return (aRef, bRef) -> Long.compare(
                    bufferFinder.apply(aRef).getLong(offsetFinder.applyAsInt(aRef) + FIELD_MEAL_ID),
                    bufferFinder.apply(bRef).getLong(offsetFinder.applyAsInt(bRef) + FIELD_MEAL_ID)
                );
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public BiLongToIntFunction comparatorNullsLast(final ColumnIdentifier<Allergens> colId) {
        if (colId instanceof Allergens.Identifier) {
            final Allergens.Identifier _id = (Allergens.Identifier) colId;
            switch (_id) {
                case CELERY       : return (aRef, bRef) -> Integer.compare(
                    bufferFinder.apply(aRef).get(offsetFinder.applyAsInt(aRef) + BITMAP_CELERY) & 0b11,
                    bufferFinder.apply(bRef).get(offsetFinder.applyAsInt(bRef) + BITMAP_CELERY) & 0b11
                );
                case PEANUTS      : return (aRef, bRef) -> Integer.compare(
                    bufferFinder.apply(aRef).get(offsetFinder.applyAsInt(aRef) + BITMAP_PEANUTS) & 0b1100,
                    bufferFinder.apply(bRef).get(offsetFinder.applyAsInt(bRef) + BITMAP_PEANUTS) & 0b1100
                );
                case SESAME_SEEDS : return (aRef, bRef) -> Integer.compare(
                    bufferFinder.apply(aRef).get(offsetFinder.applyAsInt(aRef) + BITMAP_SESAME_SEEDS) & 0b110000,
                    bufferFinder.apply(bRef).get(offsetFinder.applyAsInt(bRef) + BITMAP_SESAME_SEEDS) & 0b110000
                );
                case MEAL_ID      : return (aRef, bRef) -> Long.compare(
                    bufferFinder.apply(aRef).getLong(offsetFinder.applyAsInt(aRef) + FIELD_MEAL_ID),
                    bufferFinder.apply(bRef).getLong(offsetFinder.applyAsInt(bRef) + FIELD_MEAL_ID)
                );
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "celery"       : return (aRef, bRef) -> Integer.compare(
                    bufferFinder.apply(aRef).get(offsetFinder.applyAsInt(aRef) + BITMAP_CELERY) & 0b11,
                    bufferFinder.apply(bRef).get(offsetFinder.applyAsInt(bRef) + BITMAP_CELERY) & 0b11
                );
                case "peanuts"      : return (aRef, bRef) -> Integer.compare(
                    bufferFinder.apply(aRef).get(offsetFinder.applyAsInt(aRef) + BITMAP_PEANUTS) & 0b1100,
                    bufferFinder.apply(bRef).get(offsetFinder.applyAsInt(bRef) + BITMAP_PEANUTS) & 0b1100
                );
                case "sesame_seeds" : return (aRef, bRef) -> Integer.compare(
                    bufferFinder.apply(aRef).get(offsetFinder.applyAsInt(aRef) + BITMAP_SESAME_SEEDS) & 0b110000,
                    bufferFinder.apply(bRef).get(offsetFinder.applyAsInt(bRef) + BITMAP_SESAME_SEEDS) & 0b110000
                );
                case "meal_id"      : return (aRef, bRef) -> Long.compare(
                    bufferFinder.apply(aRef).getLong(offsetFinder.applyAsInt(aRef) + FIELD_MEAL_ID),
                    bufferFinder.apply(bRef).getLong(offsetFinder.applyAsInt(bRef) + FIELD_MEAL_ID)
                );
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongToIntFunction compareToByte(final ColumnIdentifier<Allergens> colId, final byte value) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type byte.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToShort(final ColumnIdentifier<Allergens> colId, final short value) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type short.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToInt(final ColumnIdentifier<Allergens> colId, final int value) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type int.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToLong(final ColumnIdentifier<Allergens> colId, final long value) {
        if ("meal_id".equals(colId.getColumnId())) {
            {
                final long operand = value;
                return ref -> Long.compare(
                    bufferFinder.apply(ref).getLong(offsetFinder.applyAsInt(ref) + FIELD_MEAL_ID),
                    operand
                );
            }
        }
        
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type long.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToFloat(final ColumnIdentifier<Allergens> colId, final float value) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type float.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToDouble(final ColumnIdentifier<Allergens> colId, final double value) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type double.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToBoolean(final ColumnIdentifier<Allergens> colId, final boolean value) {
        if (colId instanceof Allergens.Identifier) {
            final Allergens.Identifier _id = (Allergens.Identifier) colId;
            switch (_id) {
                case CELERY       : return value
                    ? ref -> Integer.compare(bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + BITMAP_CELERY) & 0b1, 0b1)
                    : ref -> Integer.compare(bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + BITMAP_CELERY) & 0b1, 0);
                
                case PEANUTS      : return value
                    ? ref -> Integer.compare(bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + BITMAP_PEANUTS) & 0b100, 0b100)
                    : ref -> Integer.compare(bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + BITMAP_PEANUTS) & 0b100, 0);
                
                case SESAME_SEEDS : return value
                    ? ref -> Integer.compare(bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + BITMAP_SESAME_SEEDS) & 0b10000, 0b10000)
                    : ref -> Integer.compare(bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + BITMAP_SESAME_SEEDS) & 0b10000, 0);
                
                default : {
                    throw new UnsupportedOperationException(
                        String.format("The column '%s' is either unknown or not of type boolean.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "celery"       : return value
                    ? ref -> Integer.compare(bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + BITMAP_CELERY) & 0b1, 0b1)
                    : ref -> Integer.compare(bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + BITMAP_CELERY) & 0b1, 0);
                
                case "peanuts"      : return value
                    ? ref -> Integer.compare(bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + BITMAP_PEANUTS) & 0b100, 0b100)
                    : ref -> Integer.compare(bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + BITMAP_PEANUTS) & 0b100, 0);
                
                case "sesame_seeds" : return value
                    ? ref -> Integer.compare(bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + BITMAP_SESAME_SEEDS) & 0b10000, 0b10000)
                    : ref -> Integer.compare(bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + BITMAP_SESAME_SEEDS) & 0b10000, 0);
                
                default : {
                    throw new UnsupportedOperationException(
                        String.format("The column '%s' is either unknown or not of type boolean.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongToIntFunction compareToChar(final ColumnIdentifier<Allergens> colId, final char value) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type char.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToObject(final ColumnIdentifier<Allergens> colId, final Object value) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type object.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToNull(final ColumnIdentifier<Allergens> colId) {
        if (colId instanceof Allergens.Identifier) {
            final Allergens.Identifier _id = (Allergens.Identifier) colId;
            switch (_id) {
                case CELERY       : return ref -> (bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + BITMAP_CELERY) & 0b10) == 0 ? 0 : -1;
                case PEANUTS      : return ref -> (bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + BITMAP_PEANUTS) & 0b1000) == 0 ? 0 : -1;
                case SESAME_SEEDS : return ref -> (bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + BITMAP_SESAME_SEEDS) & 0b100000) == 0 ? 0 : -1;
                case MEAL_ID      : return ALWAYS_LESS;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "celery"       : return ref -> (bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + BITMAP_CELERY) & 0b10) == 0 ? 0 : -1;
                case "peanuts"      : return ref -> (bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + BITMAP_PEANUTS) & 0b1000) == 0 ? 0 : -1;
                case "sesame_seeds" : return ref -> (bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + BITMAP_SESAME_SEEDS) & 0b100000) == 0 ? 0 : -1;
                case "meal_id"      : return ALWAYS_LESS;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongPredicate newPredicate(final ColumnIdentifier<Allergens> colId, final EntityStorePredicate predicate) {
        if (colId instanceof Allergens.Identifier) {
            final Allergens.Identifier _id = (Allergens.Identifier) colId;
            switch (_id) {
                case CELERY       : 
                case PEANUTS      : 
                case SESAME_SEEDS : return ref -> {throw new UnsupportedOperationException("No data stored for column " + colId.getColumnId() + ".");};
                case MEAL_ID      : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_MEAL_ID;
                    return predicate.test(buffer, begins, begins + Long.BYTES);
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "celery"       : 
                case "peanuts"      : 
                case "sesame_seeds" : return ref -> {throw new UnsupportedOperationException("No data stored for column " + colId.getColumnId() + ".");};
                case "meal_id"      : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_MEAL_ID;
                    return predicate.test(buffer, begins, begins + Long.BYTES);
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongToIntFunction newCompareTo(final ColumnIdentifier<Allergens> colId, final EntityStoreCompareTo compareTo) {
        if (colId instanceof Allergens.Identifier) {
            final Allergens.Identifier _id = (Allergens.Identifier) colId;
            switch (_id) {
                case CELERY       : 
                case PEANUTS      : 
                case SESAME_SEEDS : return ref -> {throw new UnsupportedOperationException("No data stored for column " + colId.getColumnId() + ".");};
                case MEAL_ID      : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_MEAL_ID;
                    return compareTo.compare(buffer, begins, begins + Long.BYTES);
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "celery"       : 
                case "peanuts"      : 
                case "sesame_seeds" : return ref -> {throw new UnsupportedOperationException("No data stored for column " + colId.getColumnId() + ".");};
                case "meal_id"      : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_MEAL_ID;
                    return compareTo.compare(buffer, begins, begins + Long.BYTES);
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public BiLongToIntFunction newComparator(final ColumnIdentifier<Allergens> colId, final EntityStoreComparator comparator) {
        if (colId instanceof Allergens.Identifier) {
            final Allergens.Identifier _id = (Allergens.Identifier) colId;
            switch (_id) {
                case CELERY       : 
                case PEANUTS      : 
                case SESAME_SEEDS : return (aRef, bRef) -> {throw new UnsupportedOperationException("No data stored for column " + colId.getColumnId() + ".");};
                case MEAL_ID      : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    final int aBegins = aRowOffset + FIELD_MEAL_ID;
                    final int bBegins = bRowOffset + FIELD_MEAL_ID;
                    return comparator.compare(
                        aBuffer, aBegins, aBegins + Long.BYTES,
                        bBuffer, bBegins, bBegins + Long.BYTES
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "celery"       : 
                case "peanuts"      : 
                case "sesame_seeds" : return (aRef, bRef) -> {throw new UnsupportedOperationException("No data stored for column " + colId.getColumnId() + ".");};
                case "meal_id"      : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    final int aBegins = aRowOffset + FIELD_MEAL_ID;
                    final int bBegins = bRowOffset + FIELD_MEAL_ID;
                    return comparator.compare(
                        aBuffer, aBegins, aBegins + Long.BYTES,
                        bBuffer, bBegins, bBegins + Long.BYTES
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongToIntFunction sizeOf() {
        return ref -> VARSIZE_BEGINS;
    }
}