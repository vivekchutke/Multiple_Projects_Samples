package com.company.allergens.generated;

import com.company.allergens.Allergens;
import com.company.allergens.AllergensManager;
import com.company.allergens.generated.GeneratedAllergens.Identifier;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.common.collection.LongCache;
import com.speedment.common.json.Json;
import com.speedment.enterprise.plugins.json.JsonCollectors;
import com.speedment.enterprise.plugins.json.JsonComponent;
import com.speedment.enterprise.plugins.json.JsonEncoder;
import com.speedment.enterprise.plugins.spring.runtime.AbstractFilter;
import com.speedment.enterprise.plugins.spring.runtime.AbstractSort;
import com.speedment.enterprise.plugins.spring.runtime.ControllerUtil;
import com.speedment.runtime.field.Field;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseStatus;

import java.util.Comparator;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.Set;
import java.util.function.Predicate;
import java.util.stream.Stream;
import javax.annotation.PostConstruct;

import static java.util.stream.Collectors.toList;

/**
 * The default REST controller logic for Allergens entities.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
@CrossOrigin(origins = "*", maxAge = 3600)
@RequestMapping("/diamonds")
public abstract class GeneratedAllergensController {
    
    protected @Autowired JsonComponent jsonComponent;
    protected @Autowired AllergensManager manager;
    protected JsonEncoder<Allergens> encoder;
    protected final LongCache<String> totalCache = new LongCache<>(1024);
    
    @PostConstruct
    void createAllergensEncoder() {
        encoder = jsonComponent.<Allergens>emptyEncoder()
            .put("celery", Allergens.CELERY)
            .put("peanuts", Allergens.PEANUTS)
            .put("sesameSeeds", Allergens.SESAME_SEEDS)
            .put("mealId", Allergens.MEAL_ID)
            .build();
    }
    
    @GetMapping(path = "/allergens", produces = "application/json")
    public String get(
            @RequestParam(name = "filter", defaultValue = "[]") String filters,
            @RequestParam(name = "sort", defaultValue = "[]") String sorters,
            @RequestParam(value = "start", defaultValue = "0") long start,
            @RequestParam(value = "limit", defaultValue = "25") long limit) {
        
        return getHelper(
            filters,
            ControllerUtil.parseFilters(filters, AllergensFilter::new).collect(toList()),
            ControllerUtil.parseSorts(sorters, AllergensSort::new).collect(toList()),
            start,
            limit
        );
    }
    
    @ResponseStatus(code = HttpStatus.CREATED)
    @PostMapping(path = "/allergens", consumes = "application/json")
    public void create(
            @RequestBody @Validated CreateBody createBody) {
        manager.persist(manager.create()
            .setCelery(createBody.getCelery())
            .setPeanuts(createBody.getPeanuts())
            .setSesameSeeds(createBody.getSesameSeeds())
            .setMealId(createBody.getMealId())
        );
    }
    
    @ResponseStatus(code = HttpStatus.OK)
    @PatchMapping(path = "/allergens/{meal_id}", consumes = "application/json")
    public void update(
            @PathVariable(name = "meal_id") long mealId,
            @RequestBody @Validated UpdateBody updateBody) {
        manager.stream()
            .filter(Allergens.MEAL_ID.equal(mealId))
            .map(allergens -> {
                allergens.setCelery(updateBody.getCelery());
                allergens.setPeanuts(updateBody.getPeanuts());
                allergens.setSesameSeeds(updateBody.getSesameSeeds());
                allergens.setMealId(updateBody.getMealId());
                return allergens;
        }).forEach(manager.updater());
    }
    
    @ResponseStatus(code = HttpStatus.NO_CONTENT)
    @DeleteMapping(path = "/allergens/{meal_id}")
    public void delete(
            @PathVariable(name = "meal_id") long mealId) {
        manager.stream()
            .filter(Allergens.MEAL_ID.equal(mealId))
            .forEach(manager.remover());
    }
    
    @ExceptionHandler(JsonMappingException.class)
    @ResponseStatus(HttpStatus.BAD_REQUEST)
    public String handleMissingValueError() {
        Map<String, Object> error = new HashMap<>();
        error.put("error", "Bad Request");
        error.put("status", 400);
        error.put("message", "Invalid request body: missing required fields");
        
        return Json.toJson(error, true);
    }
    
    @ExceptionHandler(JsonParseException.class)
    @ResponseStatus(HttpStatus.BAD_REQUEST)
    public String handleInvalidJsonError() {
        Map<String, Object> error = new HashMap<>();
        error.put("error", "Bad Request");
        error.put("status", 400);
        error.put("message", "Invalid request body: invalid JSON syntax");
        
        return Json.toJson(error, true);
    }
    
    protected final Set<Identifier> parseColumns(String jsonColumnList) {
        try {
            @SuppressWarnings("unchecked")
            final List<String> parsed = (List<String>) Json.fromJson(jsonColumnList);
            final Set<GeneratedAllergens.Identifier> result = EnumSet.noneOf(GeneratedAllergens.Identifier.class);
            parsed.stream().map(this::parseColumn).forEach(result::add);
            return result;
        } catch (final ClassCastException ex) {
            throw new IllegalArgumentException("Error in parsed JSON.");
        }
    }
    
    protected final Identifier parseColumn(String jsonColumn) {
        switch (jsonColumn) {
            case "celery":      return GeneratedAllergens.Identifier.CELERY;
            case "peanuts":     return GeneratedAllergens.Identifier.PEANUTS;
            case "sesameSeeds": return GeneratedAllergens.Identifier.SESAME_SEEDS;
            case "mealId":      return GeneratedAllergens.Identifier.MEAL_ID;
            default: throw new IllegalArgumentException(
                "Unknown column '" + jsonColumn + "'."
            );
        }
    }
    
    protected final Field<Allergens> fieldOf(Identifier columnId) {
        switch (columnId) {
            case CELERY:       return Allergens.CELERY;
            case PEANUTS:      return Allergens.PEANUTS;
            case SESAME_SEEDS: return Allergens.SESAME_SEEDS;
            case MEAL_ID:      return Allergens.MEAL_ID;
            default: throw new IllegalArgumentException(
                "Unknown column '" + columnId + "'."
            );
        }
    }
    
    protected String getHelper(
            String filterKey,
            List<Predicate<Allergens>> predicates,
            List<Comparator<Allergens>> sorters,
            long start,
            long limit) {
        
        Stream<Allergens> stream      = manager.stream();
        Stream<Allergens> totalStream = manager.stream();
        
        for (final Predicate<Allergens> predicate : predicates) {
            stream      = stream.filter(predicate);
            totalStream = totalStream.filter(predicate);
        }
        
        if (!sorters.isEmpty()) {
            final Optional<Comparator<Allergens>> comparator = sorters.stream()
                .reduce(Comparator::thenComparing);
            
            stream = stream.sorted(comparator.get());
        }
        
        final String total = String.valueOf(totalCache.getOrCompute(filterKey, totalStream::count));
        return stream
            .skip(start)
            .limit(limit)
            .collect(jsonComponent.collector(Allergens.class)
                .put("total", () -> total)
                .put("data", JsonCollectors.toList(encoder))
                .build()
            );
    }
    
    /**
     * How to filter the results from the controller. This class is designed to
     * be deserialized automatically from JSON.
     */
    public static final class AllergensFilter extends AbstractFilter<Allergens> {
        
        public AllergensFilter(
                String operator,
                String property,
                String value) {
            super(operator, property, value);
        }
        
        @Override
        public Predicate<Allergens> toPredicate() {
            switch (property()) {
                case "celery" : {
                    final Boolean v = Boolean.parseBoolean(value());
                    switch (operator()) {
                        case "eq"   : return Allergens.CELERY.equal(v);
                        case "ne"   : return Allergens.CELERY.notEqual(v);
                        case "lt"   : return Allergens.CELERY.lessThan(v);
                        case "le"   : return Allergens.CELERY.lessOrEqual(v);
                        case "gt"   : return Allergens.CELERY.greaterThan(v);
                        case "ge"   : return Allergens.CELERY.greaterOrEqual(v);
                        case "like" : // Fallthrough
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Allergens.celery."
                        );
                    }
                }
                case "peanuts" : {
                    final Boolean v = Boolean.parseBoolean(value());
                    switch (operator()) {
                        case "eq"   : return Allergens.PEANUTS.equal(v);
                        case "ne"   : return Allergens.PEANUTS.notEqual(v);
                        case "lt"   : return Allergens.PEANUTS.lessThan(v);
                        case "le"   : return Allergens.PEANUTS.lessOrEqual(v);
                        case "gt"   : return Allergens.PEANUTS.greaterThan(v);
                        case "ge"   : return Allergens.PEANUTS.greaterOrEqual(v);
                        case "like" : // Fallthrough
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Allergens.peanuts."
                        );
                    }
                }
                case "sesameSeeds" : {
                    final Boolean v = Boolean.parseBoolean(value());
                    switch (operator()) {
                        case "eq"   : return Allergens.SESAME_SEEDS.equal(v);
                        case "ne"   : return Allergens.SESAME_SEEDS.notEqual(v);
                        case "lt"   : return Allergens.SESAME_SEEDS.lessThan(v);
                        case "le"   : return Allergens.SESAME_SEEDS.lessOrEqual(v);
                        case "gt"   : return Allergens.SESAME_SEEDS.greaterThan(v);
                        case "ge"   : return Allergens.SESAME_SEEDS.greaterOrEqual(v);
                        case "like" : // Fallthrough
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Allergens.sesameSeeds."
                        );
                    }
                }
                case "mealId" : {
                    final long v = Long.parseLong(value());
                    switch (operator()) {
                        case "eq"   : return Allergens.MEAL_ID.equal(v);
                        case "ne"   : return Allergens.MEAL_ID.notEqual(v);
                        case "lt"   : return Allergens.MEAL_ID.lessThan(v);
                        case "le"   : return Allergens.MEAL_ID.lessOrEqual(v);
                        case "gt"   : return Allergens.MEAL_ID.greaterThan(v);
                        case "ge"   : return Allergens.MEAL_ID.greaterOrEqual(v);
                        case "like" : // Fallthrough
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Allergens.mealId."
                        );
                    }
                }
                default : throw new IllegalArgumentException(
                    "'" + property() + "' is not a valid Allergens property."
                );
            }
        }
    }
    
    /**
     * How to sort the results from the controller. This class is designed to be
     * deserialized automatically from JSON.
     */
    public static final class AllergensSort extends AbstractSort<Allergens> {
        
        public AllergensSort(String property, String direction) {
            super(property, direction);
        }
        
        @Override
        public Comparator<Allergens> toComparator() {
            final Comparator<Allergens> comparator;
            switch (property()) {
                case "celery"      : comparator = Allergens.CELERY.comparator();       break;
                case "peanuts"     : comparator = Allergens.PEANUTS.comparator();      break;
                case "sesameSeeds" : comparator = Allergens.SESAME_SEEDS.comparator(); break;
                case "mealId"      : comparator = Allergens.MEAL_ID.comparator();      break;
                default : throw new IllegalArgumentException(
                    "'" + property() + "' is not a valid Allergens property."
                );
            }
            
            switch (direction()) {
                case "ASC"  : return comparator;
                case "DESC" : return comparator.reversed();
                default : throw new IllegalArgumentException(
                    "'" + direction() + "' is not a valid sort direction. " +
                    "Use either 'ASC' or 'DESC', or leave out."
                );
            }
        }
    }
    
    @JsonInclude(Include.NON_NULL)
    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class CreateBody {
        
        private final Boolean celery;
        private final Boolean peanuts;
        private final Boolean sesameSeeds;
        private final long mealId;
        
        @JsonCreator
        public CreateBody(
                @JsonProperty("celery") Boolean celery,
                @JsonProperty("peanuts") Boolean peanuts,
                @JsonProperty("sesameSeeds") Boolean sesameSeeds,
                @JsonProperty("mealId") Long mealId) {
            this.celery = Objects.requireNonNull(celery, "`celery` is required");
            this.peanuts = Objects.requireNonNull(peanuts, "`peanuts` is required");
            this.sesameSeeds = Objects.requireNonNull(sesameSeeds, "`sesameSeeds` is required");
            this.mealId = Objects.requireNonNull(mealId, "`mealId` is required");
        }
        
        public Boolean getCelery() {
            return this.celery;
        }
        
        public Boolean getPeanuts() {
            return this.peanuts;
        }
        
        public Boolean getSesameSeeds() {
            return this.sesameSeeds;
        }
        
        public long getMealId() {
            return this.mealId;
        }
    }
    
    @JsonInclude(Include.NON_NULL)
    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class UpdateBody {
        
        private final Boolean celery;
        private final Boolean peanuts;
        private final Boolean sesameSeeds;
        private final long mealId;
        
        @JsonCreator
        public UpdateBody(
                @JsonProperty("celery") Boolean celery,
                @JsonProperty("peanuts") Boolean peanuts,
                @JsonProperty("sesameSeeds") Boolean sesameSeeds,
                @JsonProperty("mealId") Long mealId) {
            this.celery = Objects.requireNonNull(celery, "`celery` is required");
            this.peanuts = Objects.requireNonNull(peanuts, "`peanuts` is required");
            this.sesameSeeds = Objects.requireNonNull(sesameSeeds, "`sesameSeeds` is required");
            this.mealId = Objects.requireNonNull(mealId, "`mealId` is required");
        }
        
        public Boolean getCelery() {
            return this.celery;
        }
        
        public Boolean getPeanuts() {
            return this.peanuts;
        }
        
        public Boolean getSesameSeeds() {
            return this.sesameSeeds;
        }
        
        public long getMealId() {
            return this.mealId;
        }
    }
}