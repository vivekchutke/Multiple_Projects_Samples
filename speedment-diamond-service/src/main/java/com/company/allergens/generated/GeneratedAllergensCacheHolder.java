package com.company.allergens.generated;

import com.company.allergens.Allergens;
import com.company.allergens.AllergensEntityStoreSerializerImpl;
import com.company.allergens.AllergensManager;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.common.tuple.Tuple2;
import com.speedment.common.tuple.Tuples;
import com.speedment.enterprise.datastore.runtime.entitystore.EntityStore;
import com.speedment.enterprise.datastore.runtime.entitystore.EntityStoreHolder;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache.OfBoolean;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache.OfLong;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache;
import com.speedment.enterprise.datastore.runtime.fieldcache.MultiFieldCache;
import com.speedment.enterprise.datastore.runtime.statistic.Statistics;
import com.speedment.enterprise.datastore.runtime.util.DataStoreHolderUtil;
import com.speedment.enterprise.datastore.runtime.util.StatisticsUtil;
import com.speedment.runtime.bulk.PersistOperation;
import com.speedment.runtime.bulk.RemoveOperation;
import com.speedment.runtime.bulk.UpdateOperation;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.ColumnLabel;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.component.StreamSupplierComponent;
import com.speedment.runtime.field.Field;
import com.speedment.runtime.field.trait.HasIdentifier;

import java.util.Arrays;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.stream.Stream;

import static java.util.Objects.requireNonNull;
import static java.util.stream.Collectors.toMap;
import static java.util.stream.Collectors.toSet;

/**
 * A holder class for the various caches that are used to speed up the {@link
 * AllergensManager}.
 * 
 * Generated by
 * com.speedment.enterprise.datastore.generator.internal.code.GeneratedEntityCacheHolderTranslator
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public final class GeneratedAllergensCacheHolder implements EntityStoreHolder<Allergens> {
    
    private final EntityStore<Allergens> entityStore;
    private final OfBoolean fieldCeleryCache;
    private final OfBoolean fieldPeanutsCache;
    private final OfBoolean fieldSesameSeedsCache;
    private final OfLong fieldMealIdCache;
    
    public GeneratedAllergensCacheHolder(
            EntityStore<Allergens> entityStore,
            OfBoolean fieldCeleryCache,
            OfBoolean fieldPeanutsCache,
            OfBoolean fieldSesameSeedsCache,
            OfLong fieldMealIdCache) {
        
        this.entityStore           = requireNonNull(entityStore);
        this.fieldCeleryCache      = requireNonNull(fieldCeleryCache);
        this.fieldPeanutsCache     = requireNonNull(fieldPeanutsCache);
        this.fieldSesameSeedsCache = requireNonNull(fieldSesameSeedsCache);
        this.fieldMealIdCache      = requireNonNull(fieldMealIdCache);
    }
    
    @Override
    public EntityStore<Allergens> getEntityStore() {
        return entityStore;
    }
    
    @Override
    @SuppressWarnings("unchecked")
    public <CACHE extends FieldCache<CACHE>> CACHE getFieldCache(ColumnIdentifier<Allergens> columnId) {
        if (columnId instanceof Allergens.Identifier) {
            final Allergens.Identifier _id = (Allergens.Identifier) columnId;
            switch (_id) {
                case CELERY       : return (CACHE) fieldCeleryCache;
                case PEANUTS      : return (CACHE) fieldPeanutsCache;
                case SESAME_SEEDS : return (CACHE) fieldSesameSeedsCache;
                case MEAL_ID      : return (CACHE) fieldMealIdCache;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = columnId.getColumnId();
            switch (_colName) {
                case "celery"       : return (CACHE) fieldCeleryCache;
                case "peanuts"      : return (CACHE) fieldPeanutsCache;
                case "sesame_seeds" : return (CACHE) fieldSesameSeedsCache;
                case "meal_id"      : return (CACHE) fieldMealIdCache;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public boolean isHavingMultiFieldCache(ColumnIdentifier<Allergens> columnId) {
        return false;
    }
    
    public static CompletableFuture<GeneratedAllergensCacheHolder> reload(StreamSupplierComponent streamSupplier, ExecutorService executor) {
        return reload(DataStoreHolderUtil.buildEntityStore(
            streamSupplier,
            executor,
            AllergensEntityStoreSerializerImpl::new,
            TableIdentifier.of("diamonds", "diamonds", "allergens")
        ), executor);
    }
    
    @Override
    public EntityStoreHolder<Allergens> recycleAndPersist(PersistOperation<Allergens> persistOperation) {
        return wrapped().recycleAndPersist(persistOperation);
    }
    
    @Override
    public EntityStoreHolder<Allergens> recycleAndRemove(RemoveOperation<Allergens> removeOperation) {
        return wrapped().recycleAndRemove(removeOperation);
    }
    
    @Override
    public EntityStoreHolder<Allergens> recycleAndUpdate(UpdateOperation<Allergens> updateOperation) {
        return wrapped().recycleAndUpdate(updateOperation);
    }
    
    private EntityStoreHolder<Allergens> wrapped() {
        // Use explicit type for Stream to improve compilation time.
        final Map<ColumnLabel, FieldCache<?>> fieldCaches = Stream.<Tuple2<HasIdentifier<Allergens>, FieldCache<?>>>of(
            Tuples.of(Allergens.CELERY,      fieldCeleryCache),
            Tuples.of(Allergens.PEANUTS,     fieldPeanutsCache),
            Tuples.of(Allergens.SESAME_SEEDS,fieldSesameSeedsCache),
            Tuples.of(Allergens.MEAL_ID,     fieldMealIdCache)
        )
            .collect(toMap(t2 -> t2.get0().identifier().label(), Tuple2::get1));
        final Map<ColumnLabel,  Map<ColumnLabel, MultiFieldCache<?, ?, ?>>>  multiFieldCaches = createMultiCacheMap();
        final Set<ColumnIdentifier<Allergens>> columnIdentifiers = Stream.<HasIdentifier<Allergens>>of(
            Allergens.CELERY,
            Allergens.PEANUTS,
            Allergens.SESAME_SEEDS,
            Allergens.MEAL_ID
        )
            .map(HasIdentifier::identifier)
            .collect(toSet());
        return EntityStoreHolder.of(
            entityStore,
            fieldCaches,
            multiFieldCaches,
            columnIdentifiers
        );
    }
    
    public static CompletableFuture<GeneratedAllergensCacheHolder> reload(CompletableFuture<EntityStore<Allergens>> entityStoreFuture, ExecutorService executor) {
        final CompletableFuture<FieldCache.OfBoolean> fieldCeleryCacheFuture =
            DataStoreHolderUtil.buildBooleanCache(entityStoreFuture, executor, Allergens.CELERY, 0);
        
        final CompletableFuture<FieldCache.OfBoolean> fieldPeanutsCacheFuture =
            DataStoreHolderUtil.buildBooleanCache(entityStoreFuture, executor, Allergens.PEANUTS, 0);
        
        final CompletableFuture<FieldCache.OfBoolean> fieldSesameSeedsCacheFuture =
            DataStoreHolderUtil.buildBooleanCache(entityStoreFuture, executor, Allergens.SESAME_SEEDS, 0);
        
        final CompletableFuture<FieldCache.OfLong> fieldMealIdCacheFuture =
            DataStoreHolderUtil.buildLongCache(entityStoreFuture, executor, Allergens.MEAL_ID, FieldCache.DISTINCT);
        
        return entityStoreFuture.thenApplyAsync(entityStore -> {
            try {
                return new GeneratedAllergensCacheHolder(
                    entityStore,
                    fieldCeleryCacheFuture.get(),
                    fieldPeanutsCacheFuture.get(),
                    fieldSesameSeedsCacheFuture.get(),
                    fieldMealIdCacheFuture.get()
                );
            } catch (final ExecutionException | InterruptedException ex) {
                throw new RuntimeException(ex);
            }
        });
    }
    
    @Override
    public void close() {
        entityStore.close();
        fieldCeleryCache.close();
        fieldPeanutsCache.close();
        fieldSesameSeedsCache.close();
        fieldMealIdCache.close();
    }
    
    @Override
    public Statistics getStatistics() {
        return StatisticsUtil.getStatistics(    
            this,
            entityStore.identifier(),
            Arrays.asList(
                Allergens.Identifier.CELERY,
                Allergens.Identifier.PEANUTS,
                Allergens.Identifier.SESAME_SEEDS,
                Allergens.Identifier.MEAL_ID
            )
        
        );
    }
    
    private Map<ColumnLabel, Map<ColumnLabel, MultiFieldCache<?, ?, ?>>> createMultiCacheMap() {
        return Collections.emptyMap();
    }
}