package com.company.diamonds.diamonds.diamonds.hibernate_sequence.generated;

import com.company.diamonds.diamonds.diamonds.hibernate_sequence.HibernateSequence;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.core.util.OptionalUtil;

import java.util.Objects;
import java.util.OptionalLong;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * com.company.diamonds.diamonds.diamonds.hibernate_sequence.HibernateSequence}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedHibernateSequenceImpl implements HibernateSequence {
    
    private Long nextVal;
    
    protected GeneratedHibernateSequenceImpl() {}
    
    @Override
    public OptionalLong getNextVal() {
        return OptionalUtil.ofNullable(nextVal);
    }
    
    @Override
    public HibernateSequence setNextVal(Long nextVal) {
        this.nextVal = nextVal;
        return this;
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("nextVal = " + Objects.toString(OptionalUtil.unwrap(getNextVal())));
        return "HibernateSequenceImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof HibernateSequence)) { return false; }
        final HibernateSequence thatHibernateSequence = (HibernateSequence)that;
        if (!Objects.equals(this.getNextVal(), thatHibernateSequence.getNextVal())) { return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getNextVal()));
        return hash;
    }
}