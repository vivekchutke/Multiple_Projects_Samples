package com.company.diamonds.diamonds.diamonds.hibernate_sequence.generated;

import com.company.diamonds.diamonds.diamonds.hibernate_sequence.HibernateSequence;
import com.company.diamonds.diamonds.diamonds.hibernate_sequence.HibernateSequenceImpl;
import com.company.diamonds.diamonds.diamonds.hibernate_sequence.HibernateSequenceManager;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.manager.AbstractManager;
import com.speedment.runtime.field.Field;

import java.util.stream.Stream;

/**
 * The generated base implementation for the manager of every {@link
 * com.company.diamonds.diamonds.diamonds.hibernate_sequence.HibernateSequence}
 * entity.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedHibernateSequenceManagerImpl 
extends AbstractManager<HibernateSequence> 
implements GeneratedHibernateSequenceManager {
    
    private final TableIdentifier<HibernateSequence> tableIdentifier;
    
    protected GeneratedHibernateSequenceManagerImpl() {
        this.tableIdentifier = TableIdentifier.of("diamonds", "diamonds", "hibernate_sequence");
    }
    
    @Override
    public HibernateSequence create() {
        return new HibernateSequenceImpl();
    }
    
    @Override
    public TableIdentifier<HibernateSequence> getTableIdentifier() {
        return tableIdentifier;
    }
    
    @Override
    public Stream<Field<HibernateSequence>> fields() {
        return HibernateSequenceManager.FIELDS.stream();
    }
    
    @Override
    public Stream<Field<HibernateSequence>> primaryKeyFields() {
        return Stream.empty();
    }
}