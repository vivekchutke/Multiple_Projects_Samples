package com.company.diamonds.generated;

import com.company.diamonds.Diamond;
import com.company.diamonds.DiamondImpl;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.component.SqlAdapter;
import com.speedment.runtime.core.db.SqlFunction;

import java.sql.ResultSet;
import java.sql.SQLException;

import static com.speedment.common.injector.State.RESOLVED;
import static com.speedment.runtime.core.util.ResultSetUtil.*;

/**
 * The generated Sql Adapter for a {@link com.company.diamonds.Diamond} entity.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedDiamondSqlAdapter implements SqlAdapter<Diamond> {
    
    private final TableIdentifier<Diamond> tableIdentifier;
    
    protected GeneratedDiamondSqlAdapter() {
        this.tableIdentifier = TableIdentifier.of("diamonds", "diamonds", "diamond");
    }
    
    protected Diamond apply(ResultSet resultSet, int offset) throws SQLException {
        return createEntity()
            .setId(        resultSet.getLong(1 + offset))
            .setCarat(     resultSet.getDouble(2 + offset))
            .setClarity(   resultSet.getString(3 + offset))
            .setColor(     resultSet.getString(4 + offset))
            .setCutType(   resultSet.getString(5 + offset))
            .setDepth(     getDouble(resultSet, 6 + offset))
            .setPrice(     getDouble(resultSet, 7 + offset))
            .setTableData( getDouble(resultSet, 8 + offset))
            .setXFactor(   getDouble(resultSet, 9 + offset))
            .setYFactor(   getDouble(resultSet, 10 + offset))
            .setZFactor(   getDouble(resultSet, 11 + offset))
            ;
    }
    
    protected DiamondImpl createEntity() {
        return new DiamondImpl();
    }
    
    @Override
    public TableIdentifier<Diamond> identifier() {
        return tableIdentifier;
    }
    
    @Override
    public SqlFunction<ResultSet, Diamond> entityMapper() {
        return entityMapper(0);
    }
    
    @Override
    public SqlFunction<ResultSet, Diamond> entityMapper(int offset) {
        return rs -> apply(rs, offset);
    }
}