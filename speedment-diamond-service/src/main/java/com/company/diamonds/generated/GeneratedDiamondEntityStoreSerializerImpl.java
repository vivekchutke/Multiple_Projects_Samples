package com.company.diamonds.generated;

import com.company.diamonds.Diamond;
import com.company.diamonds.DiamondImpl;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.common.function.BiLongToIntFunction;
import com.speedment.common.function.LongToBooleanFunction;
import com.speedment.common.function.LongToByteFunction;
import com.speedment.common.function.LongToCharFunction;
import com.speedment.common.function.LongToFloatFunction;
import com.speedment.common.function.LongToShortFunction;
import com.speedment.enterprise.common.bytebuffercommon.ByteBufferUtil;
import com.speedment.enterprise.datastore.runtime.DataStoreHolder;
import com.speedment.enterprise.datastore.runtime.entitystore.EntityStoreSerializer;
import com.speedment.enterprise.datastore.runtime.entitystore.function.EntityStoreComparator;
import com.speedment.enterprise.datastore.runtime.entitystore.function.EntityStoreCompareTo;
import com.speedment.enterprise.datastore.runtime.entitystore.function.EntityStorePredicate;
import com.speedment.enterprise.datastore.runtime.throwable.DeserializationException;
import com.speedment.enterprise.datastore.runtime.throwable.Utf8Exception;
import com.speedment.enterprise.datastore.runtime.util.SerializerUtil;
import com.speedment.enterprise.datastore.runtime.util.Utf8Util;
import com.speedment.runtime.config.identifier.ColumnIdentifier;

import java.nio.ByteBuffer;
import java.util.List;
import java.util.function.BiConsumer;
import java.util.function.LongConsumer;
import java.util.function.LongFunction;
import java.util.function.LongPredicate;
import java.util.function.LongToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongUnaryOperator;

import static java.util.Collections.singletonList;
import static java.util.Objects.requireNonNull;

/**
 * Serializes and deserializes instances of Diamond.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedDiamondEntityStoreSerializerImpl implements EntityStoreSerializer<Diamond> {
    
    private final LongFunction<ByteBuffer> bufferFinder;
    private final LongToIntFunction offsetFinder;
    private static final int FIELD_ID = 0;
    private static final int FIELD_CARAT = 8;
    private static final int ENDPOS_DEPTH = 16;
    private static final int ENDPOS_PRICE = 17;
    private static final int ENDPOS_TABLE_DATA = 18;
    private static final int ENDPOS_X_FACTOR = 19;
    private static final int ENDPOS_Y_FACTOR = 20;
    private static final int ENDPOS_Z_FACTOR = 21;
    private static final int ENDPOS_CLARITY = 22;
    private static final int ENDPOS_COLOR = 26;
    private static final int ENDPOS_CUT_TYPE = 30;
    private static final int VARSIZE_BEGINS = 34;
    
    protected GeneratedDiamondEntityStoreSerializerImpl(final LongFunction<ByteBuffer> bufferFinder, final LongToIntFunction offsetFinder) {
        this.bufferFinder = requireNonNull(bufferFinder);
        this.offsetFinder = requireNonNull(offsetFinder);
    }
    
    @Override
    public BiConsumer<ByteBuffer, Diamond> serializer() {
        return (buffer, entity) -> {
            int varSizePos = 0;
            buffer.putLong(FIELD_ID, entity.getId());
            buffer.putDouble(FIELD_CARAT, entity.getCarat());
            if (entity.getDepth().isPresent()) {
                buffer.putDouble(VARSIZE_BEGINS + varSizePos, entity.getDepth().getAsDouble());
                varSizePos += Double.BYTES;
                buffer.put(ENDPOS_DEPTH, (byte) varSizePos);
            } else {
                buffer.put(ENDPOS_DEPTH, (byte) (0x80 | varSizePos));
            }
            if (entity.getPrice().isPresent()) {
                buffer.putDouble(VARSIZE_BEGINS + varSizePos, entity.getPrice().getAsDouble());
                varSizePos += Double.BYTES;
                buffer.put(ENDPOS_PRICE, (byte) varSizePos);
            } else {
                buffer.put(ENDPOS_PRICE, (byte) (0x80 | varSizePos));
            }
            if (entity.getTableData().isPresent()) {
                buffer.putDouble(VARSIZE_BEGINS + varSizePos, entity.getTableData().getAsDouble());
                varSizePos += Double.BYTES;
                buffer.put(ENDPOS_TABLE_DATA, (byte) varSizePos);
            } else {
                buffer.put(ENDPOS_TABLE_DATA, (byte) (0x80 | varSizePos));
            }
            if (entity.getXFactor().isPresent()) {
                buffer.putDouble(VARSIZE_BEGINS + varSizePos, entity.getXFactor().getAsDouble());
                varSizePos += Double.BYTES;
                buffer.put(ENDPOS_X_FACTOR, (byte) varSizePos);
            } else {
                buffer.put(ENDPOS_X_FACTOR, (byte) (0x80 | varSizePos));
            }
            if (entity.getYFactor().isPresent()) {
                buffer.putDouble(VARSIZE_BEGINS + varSizePos, entity.getYFactor().getAsDouble());
                varSizePos += Double.BYTES;
                buffer.put(ENDPOS_Y_FACTOR, (byte) varSizePos);
            } else {
                buffer.put(ENDPOS_Y_FACTOR, (byte) (0x80 | varSizePos));
            }
            if (entity.getZFactor().isPresent()) {
                buffer.putDouble(VARSIZE_BEGINS + varSizePos, entity.getZFactor().getAsDouble());
                varSizePos += Double.BYTES;
                buffer.put(ENDPOS_Z_FACTOR, (byte) varSizePos);
            } else {
                buffer.put(ENDPOS_Z_FACTOR, (byte) (0x80 | varSizePos));
            }
            if (entity.getClarity().isPresent()) {
                varSizePos += ByteBufferUtil.putArrayAbsolute(buffer, VARSIZE_BEGINS + varSizePos, entity.getClarity().get().getBytes());
                buffer.putInt(ENDPOS_CLARITY, varSizePos);
            } else {
                buffer.putInt(ENDPOS_CLARITY, (0x80000000 | varSizePos));
            }
            if (entity.getColor().isPresent()) {
                varSizePos += ByteBufferUtil.putArrayAbsolute(buffer, VARSIZE_BEGINS + varSizePos, entity.getColor().get().getBytes());
                buffer.putInt(ENDPOS_COLOR, varSizePos);
            } else {
                buffer.putInt(ENDPOS_COLOR, (0x80000000 | varSizePos));
            }
            if (entity.getCutType().isPresent()) {
                varSizePos += ByteBufferUtil.putArrayAbsolute(buffer, VARSIZE_BEGINS + varSizePos, entity.getCutType().get().getBytes());
                buffer.putInt(ENDPOS_CUT_TYPE, varSizePos);
            } else {
                buffer.putInt(ENDPOS_CUT_TYPE, (0x80000000 | varSizePos));
            }
            buffer.position(0);
            buffer.limit(VARSIZE_BEGINS + varSizePos);
        };
    }
    
    @Override
    public LongConsumer decorator(DataStoreHolder holder) {
        return DO_NOTHING;
    }
    
    @Override
    public LongFunction<Diamond> deserializer() {
        return ref -> {
            final ByteBuffer buffer = bufferFinder.apply(ref);
            final int offset = offsetFinder.applyAsInt(ref);
            final Diamond entity = new DiamondImpl();
            entity.setId(buffer.getLong(offset + FIELD_ID));
            entity.setCarat(buffer.getDouble(offset + FIELD_CARAT));
            if (buffer.getInt(offset + ENDPOS_CLARITY) >= 0) {
                try {
                    entity.setClarity(Utf8Util.deserialize(buffer,
                        offset + VARSIZE_BEGINS + (0x7f & buffer.get(offset + ENDPOS_CLARITY - Byte.BYTES)),
                        offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_CLARITY)
                    ));
                } catch (final Utf8Exception ex) {
                    final LongToIntFunction sizeOf = sizeOf();
                    throw new DeserializationException(buffer, offset, sizeOf.applyAsInt(ref), ex);
                }
            }
            if (buffer.getInt(offset + ENDPOS_COLOR) >= 0) {
                try {
                    entity.setColor(Utf8Util.deserialize(buffer,
                        offset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(offset + ENDPOS_COLOR - Integer.BYTES)),
                        offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_COLOR)
                    ));
                } catch (final Utf8Exception ex) {
                    final LongToIntFunction sizeOf = sizeOf();
                    throw new DeserializationException(buffer, offset, sizeOf.applyAsInt(ref), ex);
                }
            }
            if (buffer.getInt(offset + ENDPOS_CUT_TYPE) >= 0) {
                try {
                    entity.setCutType(Utf8Util.deserialize(buffer,
                        offset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(offset + ENDPOS_CUT_TYPE - Integer.BYTES)),
                        offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_CUT_TYPE)
                    ));
                } catch (final Utf8Exception ex) {
                    final LongToIntFunction sizeOf = sizeOf();
                    throw new DeserializationException(buffer, offset, sizeOf.applyAsInt(ref), ex);
                }
            }
            if (buffer.get(offset + ENDPOS_DEPTH) >= 0) {
                entity.setDepth(buffer.getDouble(offset + VARSIZE_BEGINS + buffer.get(offset + ENDPOS_DEPTH) - Double.BYTES));
            }
            if (buffer.get(offset + ENDPOS_PRICE) >= 0) {
                entity.setPrice(buffer.getDouble(offset + VARSIZE_BEGINS + buffer.get(offset + ENDPOS_PRICE) - Double.BYTES));
            }
            if (buffer.get(offset + ENDPOS_TABLE_DATA) >= 0) {
                entity.setTableData(buffer.getDouble(offset + VARSIZE_BEGINS + buffer.get(offset + ENDPOS_TABLE_DATA) - Double.BYTES));
            }
            if (buffer.get(offset + ENDPOS_X_FACTOR) >= 0) {
                entity.setXFactor(buffer.getDouble(offset + VARSIZE_BEGINS + buffer.get(offset + ENDPOS_X_FACTOR) - Double.BYTES));
            }
            if (buffer.get(offset + ENDPOS_Y_FACTOR) >= 0) {
                entity.setYFactor(buffer.getDouble(offset + VARSIZE_BEGINS + buffer.get(offset + ENDPOS_Y_FACTOR) - Double.BYTES));
            }
            if (buffer.get(offset + ENDPOS_Z_FACTOR) >= 0) {
                entity.setZFactor(buffer.getDouble(offset + VARSIZE_BEGINS + buffer.get(offset + ENDPOS_Z_FACTOR) - Double.BYTES));
            }
            return entity;
        };
    }
    
    @Override
    public Class<?> deserializedType(final ColumnIdentifier<Diamond> colId) {
        if (colId instanceof Diamond.Identifier) {
            final Diamond.Identifier _id = (Diamond.Identifier) colId;
            switch (_id) {
                case ID         : return long.class;
                case CARAT      : 
                case DEPTH      : 
                case PRICE      : 
                case TABLE_DATA : 
                case X_FACTOR   : 
                case Y_FACTOR   : 
                case Z_FACTOR   : return double.class;
                case CLARITY    : 
                case COLOR      : 
                case CUT_TYPE   : return String.class;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "id"         : return long.class;
                case "carat"      : 
                case "depth"      : 
                case "price"      : 
                case "table_data" : 
                case "x_factor"   : 
                case "y_factor"   : 
                case "z_factor"   : return double.class;
                case "clarity"    : 
                case "color"      : 
                case "cut_type"   : return String.class;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public <FK_ENTITY> LongUnaryOperator finder(final ColumnIdentifier<Diamond> colId, final ColumnIdentifier<FK_ENTITY> fkColId) {
        return finder(singletonList(colId), singletonList(fkColId));
    }
    
    @Override
    public <FK_ENTITY> LongUnaryOperator finder(final List<ColumnIdentifier<Diamond>> cols, final List<ColumnIdentifier<FK_ENTITY>> fkCols) {
        throw new UnsupportedOperationException("Diamond has no foreign references.");
    }
    
    @Override
    public LongUnaryOperator finder(final String fkName) {
        throw new UnsupportedOperationException("Diamond has no foreign references.");
    }
    
    @Override
    public LongPredicate isNull(final ColumnIdentifier<Diamond> colId) {
        if (colId instanceof Diamond.Identifier) {
            final Diamond.Identifier _id = (Diamond.Identifier) colId;
            switch (_id) {
                case ID         : 
                case CARAT      : return ALWAYS_FALSE;
                case DEPTH      : return ref -> bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + ENDPOS_DEPTH) < 0;
                case PRICE      : return ref -> bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + ENDPOS_PRICE) < 0;
                case TABLE_DATA : return ref -> bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + ENDPOS_TABLE_DATA) < 0;
                case X_FACTOR   : return ref -> bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + ENDPOS_X_FACTOR) < 0;
                case Y_FACTOR   : return ref -> bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + ENDPOS_Y_FACTOR) < 0;
                case Z_FACTOR   : return ref -> bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + ENDPOS_Z_FACTOR) < 0;
                case CLARITY    : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_CLARITY) < 0;
                case COLOR      : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_COLOR) < 0;
                case CUT_TYPE   : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_CUT_TYPE) < 0;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "id"         : 
                case "carat"      : return ALWAYS_FALSE;
                case "depth"      : return ref -> bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + ENDPOS_DEPTH) < 0;
                case "price"      : return ref -> bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + ENDPOS_PRICE) < 0;
                case "table_data" : return ref -> bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + ENDPOS_TABLE_DATA) < 0;
                case "x_factor"   : return ref -> bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + ENDPOS_X_FACTOR) < 0;
                case "y_factor"   : return ref -> bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + ENDPOS_Y_FACTOR) < 0;
                case "z_factor"   : return ref -> bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + ENDPOS_Z_FACTOR) < 0;
                case "clarity"    : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_CLARITY) < 0;
                case "color"      : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_COLOR) < 0;
                case "cut_type"   : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_CUT_TYPE) < 0;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongPredicate isPresent(final ColumnIdentifier<Diamond> colId) {
        if (colId instanceof Diamond.Identifier) {
            final Diamond.Identifier _id = (Diamond.Identifier) colId;
            switch (_id) {
                case ID         : 
                case CARAT      : return ALWAYS_TRUE;
                case DEPTH      : return ref -> bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + ENDPOS_DEPTH) >= 0;
                case PRICE      : return ref -> bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + ENDPOS_PRICE) >= 0;
                case TABLE_DATA : return ref -> bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + ENDPOS_TABLE_DATA) >= 0;
                case X_FACTOR   : return ref -> bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + ENDPOS_X_FACTOR) >= 0;
                case Y_FACTOR   : return ref -> bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + ENDPOS_Y_FACTOR) >= 0;
                case Z_FACTOR   : return ref -> bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + ENDPOS_Z_FACTOR) >= 0;
                case CLARITY    : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_CLARITY) >= 0;
                case COLOR      : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_COLOR) >= 0;
                case CUT_TYPE   : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_CUT_TYPE) >= 0;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "id"         : 
                case "carat"      : return ALWAYS_TRUE;
                case "depth"      : return ref -> bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + ENDPOS_DEPTH) >= 0;
                case "price"      : return ref -> bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + ENDPOS_PRICE) >= 0;
                case "table_data" : return ref -> bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + ENDPOS_TABLE_DATA) >= 0;
                case "x_factor"   : return ref -> bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + ENDPOS_X_FACTOR) >= 0;
                case "y_factor"   : return ref -> bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + ENDPOS_Y_FACTOR) >= 0;
                case "z_factor"   : return ref -> bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + ENDPOS_Z_FACTOR) >= 0;
                case "clarity"    : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_CLARITY) >= 0;
                case "color"      : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_COLOR) >= 0;
                case "cut_type"   : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_CUT_TYPE) >= 0;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongToByteFunction byteDeserializer(final ColumnIdentifier<Diamond> colId) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type byte.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToShortFunction shortDeserializer(final ColumnIdentifier<Diamond> colId) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type short.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction intDeserializer(final ColumnIdentifier<Diamond> colId) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type int.", colId.getColumnId())
        );
    }
    
    @Override
    public LongUnaryOperator longDeserializer(final ColumnIdentifier<Diamond> colId) {
        if ("id".equals(colId.getColumnId())) {
            return ref -> bufferFinder.apply(ref).getLong(offsetFinder.applyAsInt(ref) + FIELD_ID);
        }
        
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type long.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToFloatFunction floatDeserializer(final ColumnIdentifier<Diamond> colId) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type float.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToDoubleFunction doubleDeserializer(final ColumnIdentifier<Diamond> colId) {
        if (colId instanceof Diamond.Identifier) {
            final Diamond.Identifier _id = (Diamond.Identifier) colId;
            switch (_id) {
                case CARAT      : return ref -> bufferFinder.apply(ref).getDouble(offsetFinder.applyAsInt(ref) + FIELD_CARAT);
                case DEPTH      : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    return buffer.getDouble(offset + VARSIZE_BEGINS + buffer.get(offset + ENDPOS_DEPTH) - Double.BYTES);
                };
                case PRICE      : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    return buffer.getDouble(offset + VARSIZE_BEGINS + buffer.get(offset + ENDPOS_PRICE) - Double.BYTES);
                };
                case TABLE_DATA : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    return buffer.getDouble(offset + VARSIZE_BEGINS + buffer.get(offset + ENDPOS_TABLE_DATA) - Double.BYTES);
                };
                case X_FACTOR   : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    return buffer.getDouble(offset + VARSIZE_BEGINS + buffer.get(offset + ENDPOS_X_FACTOR) - Double.BYTES);
                };
                case Y_FACTOR   : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    return buffer.getDouble(offset + VARSIZE_BEGINS + buffer.get(offset + ENDPOS_Y_FACTOR) - Double.BYTES);
                };
                case Z_FACTOR   : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    return buffer.getDouble(offset + VARSIZE_BEGINS + buffer.get(offset + ENDPOS_Z_FACTOR) - Double.BYTES);
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("The column '%s' is either unknown or not of type double.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "carat"      : return ref -> bufferFinder.apply(ref).getDouble(offsetFinder.applyAsInt(ref) + FIELD_CARAT);
                case "depth"      : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    return buffer.getDouble(offset + VARSIZE_BEGINS + buffer.get(offset + ENDPOS_DEPTH) - Double.BYTES);
                };
                case "price"      : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    return buffer.getDouble(offset + VARSIZE_BEGINS + buffer.get(offset + ENDPOS_PRICE) - Double.BYTES);
                };
                case "table_data" : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    return buffer.getDouble(offset + VARSIZE_BEGINS + buffer.get(offset + ENDPOS_TABLE_DATA) - Double.BYTES);
                };
                case "x_factor"   : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    return buffer.getDouble(offset + VARSIZE_BEGINS + buffer.get(offset + ENDPOS_X_FACTOR) - Double.BYTES);
                };
                case "y_factor"   : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    return buffer.getDouble(offset + VARSIZE_BEGINS + buffer.get(offset + ENDPOS_Y_FACTOR) - Double.BYTES);
                };
                case "z_factor"   : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    return buffer.getDouble(offset + VARSIZE_BEGINS + buffer.get(offset + ENDPOS_Z_FACTOR) - Double.BYTES);
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("The column '%s' is either unknown or not of type double.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongToCharFunction charDeserializer(final ColumnIdentifier<Diamond> colId) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type char.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToBooleanFunction booleanDeserializer(final ColumnIdentifier<Diamond> colId) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type boolean.", colId.getColumnId())
        );
    }
    
    @Override
    public LongFunction<?> objectDeserializer(final ColumnIdentifier<Diamond> colId) {
        if (colId instanceof Diamond.Identifier) {
            final Diamond.Identifier _id = (Diamond.Identifier) colId;
            switch (_id) {
                case CLARITY  : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    try {
                        return Utf8Util.deserialize(buffer,
                            offset + VARSIZE_BEGINS + (0x7f & buffer.get(offset + ENDPOS_CLARITY - Byte.BYTES)),
                            offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_CLARITY)
                        );
                    } catch (final Utf8Exception ex) {
                        final LongToIntFunction sizeOf = sizeOf();
                        throw new DeserializationException(buffer, offset, sizeOf.applyAsInt(ref), ex);
                    }
                };
                case COLOR    : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    try {
                        return Utf8Util.deserialize(buffer,
                            offset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(offset + ENDPOS_COLOR - Integer.BYTES)),
                            offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_COLOR)
                        );
                    } catch (final Utf8Exception ex) {
                        final LongToIntFunction sizeOf = sizeOf();
                        throw new DeserializationException(buffer, offset, sizeOf.applyAsInt(ref), ex);
                    }
                };
                case CUT_TYPE : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    try {
                        return Utf8Util.deserialize(buffer,
                            offset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(offset + ENDPOS_CUT_TYPE - Integer.BYTES)),
                            offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_CUT_TYPE)
                        );
                    } catch (final Utf8Exception ex) {
                        final LongToIntFunction sizeOf = sizeOf();
                        throw new DeserializationException(buffer, offset, sizeOf.applyAsInt(ref), ex);
                    }
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "clarity"  : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    try {
                        return Utf8Util.deserialize(buffer,
                            offset + VARSIZE_BEGINS + (0x7f & buffer.get(offset + ENDPOS_CLARITY - Byte.BYTES)),
                            offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_CLARITY)
                        );
                    } catch (final Utf8Exception ex) {
                        final LongToIntFunction sizeOf = sizeOf();
                        throw new DeserializationException(buffer, offset, sizeOf.applyAsInt(ref), ex);
                    }
                };
                case "color"    : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    try {
                        return Utf8Util.deserialize(buffer,
                            offset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(offset + ENDPOS_COLOR - Integer.BYTES)),
                            offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_COLOR)
                        );
                    } catch (final Utf8Exception ex) {
                        final LongToIntFunction sizeOf = sizeOf();
                        throw new DeserializationException(buffer, offset, sizeOf.applyAsInt(ref), ex);
                    }
                };
                case "cut_type" : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    try {
                        return Utf8Util.deserialize(buffer,
                            offset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(offset + ENDPOS_CUT_TYPE - Integer.BYTES)),
                            offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_CUT_TYPE)
                        );
                    } catch (final Utf8Exception ex) {
                        final LongToIntFunction sizeOf = sizeOf();
                        throw new DeserializationException(buffer, offset, sizeOf.applyAsInt(ref), ex);
                    }
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public BiLongToIntFunction comparator(final ColumnIdentifier<Diamond> colId) {
        if (colId instanceof Diamond.Identifier) {
            final Diamond.Identifier _id = (Diamond.Identifier) colId;
            switch (_id) {
                case ID         : return (aRef, bRef) -> Long.compare(
                    bufferFinder.apply(aRef).getLong(offsetFinder.applyAsInt(aRef) + FIELD_ID),
                    bufferFinder.apply(bRef).getLong(offsetFinder.applyAsInt(bRef) + FIELD_ID)
                );
                case CARAT      : return (aRef, bRef) -> Double.compare(
                    bufferFinder.apply(aRef).getDouble(offsetFinder.applyAsInt(aRef) + FIELD_CARAT),
                    bufferFinder.apply(bRef).getDouble(offsetFinder.applyAsInt(bRef) + FIELD_CARAT)
                );
                case DEPTH      : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    return Double.compare(
                        aBuf.getDouble(aOffset + VARSIZE_BEGINS + aBuf.get(aOffset + ENDPOS_DEPTH) - Double.BYTES),
                        bBuf.getDouble(bOffset + VARSIZE_BEGINS + bBuf.get(bOffset + ENDPOS_DEPTH) - Double.BYTES)
                    );
                };
                case PRICE      : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    return Double.compare(
                        aBuf.getDouble(aOffset + VARSIZE_BEGINS + aBuf.get(aOffset + ENDPOS_PRICE) - Double.BYTES),
                        bBuf.getDouble(bOffset + VARSIZE_BEGINS + bBuf.get(bOffset + ENDPOS_PRICE) - Double.BYTES)
                    );
                };
                case TABLE_DATA : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    return Double.compare(
                        aBuf.getDouble(aOffset + VARSIZE_BEGINS + aBuf.get(aOffset + ENDPOS_TABLE_DATA) - Double.BYTES),
                        bBuf.getDouble(bOffset + VARSIZE_BEGINS + bBuf.get(bOffset + ENDPOS_TABLE_DATA) - Double.BYTES)
                    );
                };
                case X_FACTOR   : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    return Double.compare(
                        aBuf.getDouble(aOffset + VARSIZE_BEGINS + aBuf.get(aOffset + ENDPOS_X_FACTOR) - Double.BYTES),
                        bBuf.getDouble(bOffset + VARSIZE_BEGINS + bBuf.get(bOffset + ENDPOS_X_FACTOR) - Double.BYTES)
                    );
                };
                case Y_FACTOR   : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    return Double.compare(
                        aBuf.getDouble(aOffset + VARSIZE_BEGINS + aBuf.get(aOffset + ENDPOS_Y_FACTOR) - Double.BYTES),
                        bBuf.getDouble(bOffset + VARSIZE_BEGINS + bBuf.get(bOffset + ENDPOS_Y_FACTOR) - Double.BYTES)
                    );
                };
                case Z_FACTOR   : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    return Double.compare(
                        aBuf.getDouble(aOffset + VARSIZE_BEGINS + aBuf.get(aOffset + ENDPOS_Z_FACTOR) - Double.BYTES),
                        bBuf.getDouble(bOffset + VARSIZE_BEGINS + bBuf.get(bOffset + ENDPOS_Z_FACTOR) - Double.BYTES)
                    );
                };
                case CLARITY    : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + (0x7f & aBuf.get(aOffset + ENDPOS_CLARITY - Byte.BYTES));
                    final int bStarts = bOffset + VARSIZE_BEGINS + (0x7f & bBuf.get(bOffset + ENDPOS_CLARITY - Byte.BYTES));
                    final int aEnds   = aOffset + VARSIZE_BEGINS + aBuf.getInt(aOffset + ENDPOS_CLARITY);
                    final int bEnds   = bOffset + VARSIZE_BEGINS + bBuf.getInt(bOffset + ENDPOS_CLARITY);
                    return ByteBufferUtil.compare(
                        aBuf, aStarts, aEnds,
                        bBuf, bStarts, bEnds
                    );
                };
                case COLOR      : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + (0x7fffffff & aBuf.getInt(aOffset + ENDPOS_COLOR - Integer.BYTES));
                    final int bStarts = bOffset + VARSIZE_BEGINS + (0x7fffffff & bBuf.getInt(bOffset + ENDPOS_COLOR - Integer.BYTES));
                    final int aEnds   = aOffset + VARSIZE_BEGINS + aBuf.getInt(aOffset + ENDPOS_COLOR);
                    final int bEnds   = bOffset + VARSIZE_BEGINS + bBuf.getInt(bOffset + ENDPOS_COLOR);
                    return ByteBufferUtil.compare(
                        aBuf, aStarts, aEnds,
                        bBuf, bStarts, bEnds
                    );
                };
                case CUT_TYPE   : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + (0x7fffffff & aBuf.getInt(aOffset + ENDPOS_CUT_TYPE - Integer.BYTES));
                    final int bStarts = bOffset + VARSIZE_BEGINS + (0x7fffffff & bBuf.getInt(bOffset + ENDPOS_CUT_TYPE - Integer.BYTES));
                    final int aEnds   = aOffset + VARSIZE_BEGINS + aBuf.getInt(aOffset + ENDPOS_CUT_TYPE);
                    final int bEnds   = bOffset + VARSIZE_BEGINS + bBuf.getInt(bOffset + ENDPOS_CUT_TYPE);
                    return ByteBufferUtil.compare(
                        aBuf, aStarts, aEnds,
                        bBuf, bStarts, bEnds
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "id"         : return (aRef, bRef) -> Long.compare(
                    bufferFinder.apply(aRef).getLong(offsetFinder.applyAsInt(aRef) + FIELD_ID),
                    bufferFinder.apply(bRef).getLong(offsetFinder.applyAsInt(bRef) + FIELD_ID)
                );
                case "carat"      : return (aRef, bRef) -> Double.compare(
                    bufferFinder.apply(aRef).getDouble(offsetFinder.applyAsInt(aRef) + FIELD_CARAT),
                    bufferFinder.apply(bRef).getDouble(offsetFinder.applyAsInt(bRef) + FIELD_CARAT)
                );
                case "depth"      : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    return Double.compare(
                        aBuf.getDouble(aOffset + VARSIZE_BEGINS + aBuf.get(aOffset + ENDPOS_DEPTH) - Double.BYTES),
                        bBuf.getDouble(bOffset + VARSIZE_BEGINS + bBuf.get(bOffset + ENDPOS_DEPTH) - Double.BYTES)
                    );
                };
                case "price"      : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    return Double.compare(
                        aBuf.getDouble(aOffset + VARSIZE_BEGINS + aBuf.get(aOffset + ENDPOS_PRICE) - Double.BYTES),
                        bBuf.getDouble(bOffset + VARSIZE_BEGINS + bBuf.get(bOffset + ENDPOS_PRICE) - Double.BYTES)
                    );
                };
                case "table_data" : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    return Double.compare(
                        aBuf.getDouble(aOffset + VARSIZE_BEGINS + aBuf.get(aOffset + ENDPOS_TABLE_DATA) - Double.BYTES),
                        bBuf.getDouble(bOffset + VARSIZE_BEGINS + bBuf.get(bOffset + ENDPOS_TABLE_DATA) - Double.BYTES)
                    );
                };
                case "x_factor"   : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    return Double.compare(
                        aBuf.getDouble(aOffset + VARSIZE_BEGINS + aBuf.get(aOffset + ENDPOS_X_FACTOR) - Double.BYTES),
                        bBuf.getDouble(bOffset + VARSIZE_BEGINS + bBuf.get(bOffset + ENDPOS_X_FACTOR) - Double.BYTES)
                    );
                };
                case "y_factor"   : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    return Double.compare(
                        aBuf.getDouble(aOffset + VARSIZE_BEGINS + aBuf.get(aOffset + ENDPOS_Y_FACTOR) - Double.BYTES),
                        bBuf.getDouble(bOffset + VARSIZE_BEGINS + bBuf.get(bOffset + ENDPOS_Y_FACTOR) - Double.BYTES)
                    );
                };
                case "z_factor"   : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    return Double.compare(
                        aBuf.getDouble(aOffset + VARSIZE_BEGINS + aBuf.get(aOffset + ENDPOS_Z_FACTOR) - Double.BYTES),
                        bBuf.getDouble(bOffset + VARSIZE_BEGINS + bBuf.get(bOffset + ENDPOS_Z_FACTOR) - Double.BYTES)
                    );
                };
                case "clarity"    : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + (0x7f & aBuf.get(aOffset + ENDPOS_CLARITY - Byte.BYTES));
                    final int bStarts = bOffset + VARSIZE_BEGINS + (0x7f & bBuf.get(bOffset + ENDPOS_CLARITY - Byte.BYTES));
                    final int aEnds   = aOffset + VARSIZE_BEGINS + aBuf.getInt(aOffset + ENDPOS_CLARITY);
                    final int bEnds   = bOffset + VARSIZE_BEGINS + bBuf.getInt(bOffset + ENDPOS_CLARITY);
                    return ByteBufferUtil.compare(
                        aBuf, aStarts, aEnds,
                        bBuf, bStarts, bEnds
                    );
                };
                case "color"      : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + (0x7fffffff & aBuf.getInt(aOffset + ENDPOS_COLOR - Integer.BYTES));
                    final int bStarts = bOffset + VARSIZE_BEGINS + (0x7fffffff & bBuf.getInt(bOffset + ENDPOS_COLOR - Integer.BYTES));
                    final int aEnds   = aOffset + VARSIZE_BEGINS + aBuf.getInt(aOffset + ENDPOS_COLOR);
                    final int bEnds   = bOffset + VARSIZE_BEGINS + bBuf.getInt(bOffset + ENDPOS_COLOR);
                    return ByteBufferUtil.compare(
                        aBuf, aStarts, aEnds,
                        bBuf, bStarts, bEnds
                    );
                };
                case "cut_type"   : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + (0x7fffffff & aBuf.getInt(aOffset + ENDPOS_CUT_TYPE - Integer.BYTES));
                    final int bStarts = bOffset + VARSIZE_BEGINS + (0x7fffffff & bBuf.getInt(bOffset + ENDPOS_CUT_TYPE - Integer.BYTES));
                    final int aEnds   = aOffset + VARSIZE_BEGINS + aBuf.getInt(aOffset + ENDPOS_CUT_TYPE);
                    final int bEnds   = bOffset + VARSIZE_BEGINS + bBuf.getInt(bOffset + ENDPOS_CUT_TYPE);
                    return ByteBufferUtil.compare(
                        aBuf, aStarts, aEnds,
                        bBuf, bStarts, bEnds
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public BiLongToIntFunction comparatorNullsLast(final ColumnIdentifier<Diamond> colId) {
        if (colId instanceof Diamond.Identifier) {
            final Diamond.Identifier _id = (Diamond.Identifier) colId;
            switch (_id) {
                case ID         : return (aRef, bRef) -> Long.compare(
                    bufferFinder.apply(aRef).getLong(offsetFinder.applyAsInt(aRef) + FIELD_ID),
                    bufferFinder.apply(bRef).getLong(offsetFinder.applyAsInt(bRef) + FIELD_ID)
                );
                case CARAT      : return (aRef, bRef) -> Double.compare(
                    bufferFinder.apply(aRef).getDouble(offsetFinder.applyAsInt(aRef) + FIELD_CARAT),
                    bufferFinder.apply(bRef).getDouble(offsetFinder.applyAsInt(bRef) + FIELD_CARAT)
                );
                case DEPTH      : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aEndPos = aBuf.get(aOffset + ENDPOS_DEPTH);
                    final int bEndPos = bBuf.get(bOffset + ENDPOS_DEPTH);
                    if (aEndPos < 0 && bEndPos < 0) return 0;
                    else if (aEndPos < 0) return 1;
                    else if (bEndPos < 0) return -1;
                    else return Double.compare(
                        aBuf.getDouble(aOffset + VARSIZE_BEGINS + aEndPos - Double.BYTES),
                        bBuf.getDouble(bOffset + VARSIZE_BEGINS + bEndPos - Double.BYTES)
                    );
                };
                case PRICE      : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aEndPos = aBuf.get(aOffset + ENDPOS_PRICE);
                    final int bEndPos = bBuf.get(bOffset + ENDPOS_PRICE);
                    if (aEndPos < 0 && bEndPos < 0) return 0;
                    else if (aEndPos < 0) return 1;
                    else if (bEndPos < 0) return -1;
                    else return Double.compare(
                        aBuf.getDouble(aOffset + VARSIZE_BEGINS + aEndPos - Double.BYTES),
                        bBuf.getDouble(bOffset + VARSIZE_BEGINS + bEndPos - Double.BYTES)
                    );
                };
                case TABLE_DATA : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aEndPos = aBuf.get(aOffset + ENDPOS_TABLE_DATA);
                    final int bEndPos = bBuf.get(bOffset + ENDPOS_TABLE_DATA);
                    if (aEndPos < 0 && bEndPos < 0) return 0;
                    else if (aEndPos < 0) return 1;
                    else if (bEndPos < 0) return -1;
                    else return Double.compare(
                        aBuf.getDouble(aOffset + VARSIZE_BEGINS + aEndPos - Double.BYTES),
                        bBuf.getDouble(bOffset + VARSIZE_BEGINS + bEndPos - Double.BYTES)
                    );
                };
                case X_FACTOR   : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aEndPos = aBuf.get(aOffset + ENDPOS_X_FACTOR);
                    final int bEndPos = bBuf.get(bOffset + ENDPOS_X_FACTOR);
                    if (aEndPos < 0 && bEndPos < 0) return 0;
                    else if (aEndPos < 0) return 1;
                    else if (bEndPos < 0) return -1;
                    else return Double.compare(
                        aBuf.getDouble(aOffset + VARSIZE_BEGINS + aEndPos - Double.BYTES),
                        bBuf.getDouble(bOffset + VARSIZE_BEGINS + bEndPos - Double.BYTES)
                    );
                };
                case Y_FACTOR   : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aEndPos = aBuf.get(aOffset + ENDPOS_Y_FACTOR);
                    final int bEndPos = bBuf.get(bOffset + ENDPOS_Y_FACTOR);
                    if (aEndPos < 0 && bEndPos < 0) return 0;
                    else if (aEndPos < 0) return 1;
                    else if (bEndPos < 0) return -1;
                    else return Double.compare(
                        aBuf.getDouble(aOffset + VARSIZE_BEGINS + aEndPos - Double.BYTES),
                        bBuf.getDouble(bOffset + VARSIZE_BEGINS + bEndPos - Double.BYTES)
                    );
                };
                case Z_FACTOR   : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aEndPos = aBuf.get(aOffset + ENDPOS_Z_FACTOR);
                    final int bEndPos = bBuf.get(bOffset + ENDPOS_Z_FACTOR);
                    if (aEndPos < 0 && bEndPos < 0) return 0;
                    else if (aEndPos < 0) return 1;
                    else if (bEndPos < 0) return -1;
                    else return Double.compare(
                        aBuf.getDouble(aOffset + VARSIZE_BEGINS + aEndPos - Double.BYTES),
                        bBuf.getDouble(bOffset + VARSIZE_BEGINS + bEndPos - Double.BYTES)
                    );
                };
                case CLARITY    : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + (0x7f & aBuf.get(aOffset + ENDPOS_CLARITY - Byte.BYTES));
                    final int bStarts = bOffset + VARSIZE_BEGINS + (0x7f & bBuf.get(bOffset + ENDPOS_CLARITY - Byte.BYTES));
                    final int aEnds   = aBuf.getInt(aOffset + ENDPOS_CLARITY);
                    final int bEnds   = bBuf.getInt(bOffset + ENDPOS_CLARITY);
                    if (aEnds < 0 && bEnds < 0) return 0;
                    else if (aEnds < 0) return 1;
                    else if (bEnds < 0) return -1;
                    else return ByteBufferUtil.compare(
                        aBuf, aStarts, aOffset + VARSIZE_BEGINS + aEnds,
                        bBuf, bStarts, bOffset + VARSIZE_BEGINS + bEnds
                    );
                };
                case COLOR      : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + (0x7fffffff & aBuf.getInt(aOffset + ENDPOS_COLOR - Integer.BYTES));
                    final int bStarts = bOffset + VARSIZE_BEGINS + (0x7fffffff & bBuf.getInt(bOffset + ENDPOS_COLOR - Integer.BYTES));
                    final int aEnds   = aBuf.getInt(aOffset + ENDPOS_COLOR);
                    final int bEnds   = bBuf.getInt(bOffset + ENDPOS_COLOR);
                    if (aEnds < 0 && bEnds < 0) return 0;
                    else if (aEnds < 0) return 1;
                    else if (bEnds < 0) return -1;
                    else return ByteBufferUtil.compare(
                        aBuf, aStarts, aOffset + VARSIZE_BEGINS + aEnds,
                        bBuf, bStarts, bOffset + VARSIZE_BEGINS + bEnds
                    );
                };
                case CUT_TYPE   : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + (0x7fffffff & aBuf.getInt(aOffset + ENDPOS_CUT_TYPE - Integer.BYTES));
                    final int bStarts = bOffset + VARSIZE_BEGINS + (0x7fffffff & bBuf.getInt(bOffset + ENDPOS_CUT_TYPE - Integer.BYTES));
                    final int aEnds   = aBuf.getInt(aOffset + ENDPOS_CUT_TYPE);
                    final int bEnds   = bBuf.getInt(bOffset + ENDPOS_CUT_TYPE);
                    if (aEnds < 0 && bEnds < 0) return 0;
                    else if (aEnds < 0) return 1;
                    else if (bEnds < 0) return -1;
                    else return ByteBufferUtil.compare(
                        aBuf, aStarts, aOffset + VARSIZE_BEGINS + aEnds,
                        bBuf, bStarts, bOffset + VARSIZE_BEGINS + bEnds
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "id"         : return (aRef, bRef) -> Long.compare(
                    bufferFinder.apply(aRef).getLong(offsetFinder.applyAsInt(aRef) + FIELD_ID),
                    bufferFinder.apply(bRef).getLong(offsetFinder.applyAsInt(bRef) + FIELD_ID)
                );
                case "carat"      : return (aRef, bRef) -> Double.compare(
                    bufferFinder.apply(aRef).getDouble(offsetFinder.applyAsInt(aRef) + FIELD_CARAT),
                    bufferFinder.apply(bRef).getDouble(offsetFinder.applyAsInt(bRef) + FIELD_CARAT)
                );
                case "depth"      : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aEndPos = aBuf.get(aOffset + ENDPOS_DEPTH);
                    final int bEndPos = bBuf.get(bOffset + ENDPOS_DEPTH);
                    if (aEndPos < 0 && bEndPos < 0) return 0;
                    else if (aEndPos < 0) return 1;
                    else if (bEndPos < 0) return -1;
                    else return Double.compare(
                        aBuf.getDouble(aOffset + VARSIZE_BEGINS + aEndPos - Double.BYTES),
                        bBuf.getDouble(bOffset + VARSIZE_BEGINS + bEndPos - Double.BYTES)
                    );
                };
                case "price"      : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aEndPos = aBuf.get(aOffset + ENDPOS_PRICE);
                    final int bEndPos = bBuf.get(bOffset + ENDPOS_PRICE);
                    if (aEndPos < 0 && bEndPos < 0) return 0;
                    else if (aEndPos < 0) return 1;
                    else if (bEndPos < 0) return -1;
                    else return Double.compare(
                        aBuf.getDouble(aOffset + VARSIZE_BEGINS + aEndPos - Double.BYTES),
                        bBuf.getDouble(bOffset + VARSIZE_BEGINS + bEndPos - Double.BYTES)
                    );
                };
                case "table_data" : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aEndPos = aBuf.get(aOffset + ENDPOS_TABLE_DATA);
                    final int bEndPos = bBuf.get(bOffset + ENDPOS_TABLE_DATA);
                    if (aEndPos < 0 && bEndPos < 0) return 0;
                    else if (aEndPos < 0) return 1;
                    else if (bEndPos < 0) return -1;
                    else return Double.compare(
                        aBuf.getDouble(aOffset + VARSIZE_BEGINS + aEndPos - Double.BYTES),
                        bBuf.getDouble(bOffset + VARSIZE_BEGINS + bEndPos - Double.BYTES)
                    );
                };
                case "x_factor"   : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aEndPos = aBuf.get(aOffset + ENDPOS_X_FACTOR);
                    final int bEndPos = bBuf.get(bOffset + ENDPOS_X_FACTOR);
                    if (aEndPos < 0 && bEndPos < 0) return 0;
                    else if (aEndPos < 0) return 1;
                    else if (bEndPos < 0) return -1;
                    else return Double.compare(
                        aBuf.getDouble(aOffset + VARSIZE_BEGINS + aEndPos - Double.BYTES),
                        bBuf.getDouble(bOffset + VARSIZE_BEGINS + bEndPos - Double.BYTES)
                    );
                };
                case "y_factor"   : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aEndPos = aBuf.get(aOffset + ENDPOS_Y_FACTOR);
                    final int bEndPos = bBuf.get(bOffset + ENDPOS_Y_FACTOR);
                    if (aEndPos < 0 && bEndPos < 0) return 0;
                    else if (aEndPos < 0) return 1;
                    else if (bEndPos < 0) return -1;
                    else return Double.compare(
                        aBuf.getDouble(aOffset + VARSIZE_BEGINS + aEndPos - Double.BYTES),
                        bBuf.getDouble(bOffset + VARSIZE_BEGINS + bEndPos - Double.BYTES)
                    );
                };
                case "z_factor"   : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aEndPos = aBuf.get(aOffset + ENDPOS_Z_FACTOR);
                    final int bEndPos = bBuf.get(bOffset + ENDPOS_Z_FACTOR);
                    if (aEndPos < 0 && bEndPos < 0) return 0;
                    else if (aEndPos < 0) return 1;
                    else if (bEndPos < 0) return -1;
                    else return Double.compare(
                        aBuf.getDouble(aOffset + VARSIZE_BEGINS + aEndPos - Double.BYTES),
                        bBuf.getDouble(bOffset + VARSIZE_BEGINS + bEndPos - Double.BYTES)
                    );
                };
                case "clarity"    : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + (0x7f & aBuf.get(aOffset + ENDPOS_CLARITY - Byte.BYTES));
                    final int bStarts = bOffset + VARSIZE_BEGINS + (0x7f & bBuf.get(bOffset + ENDPOS_CLARITY - Byte.BYTES));
                    final int aEnds   = aBuf.getInt(aOffset + ENDPOS_CLARITY);
                    final int bEnds   = bBuf.getInt(bOffset + ENDPOS_CLARITY);
                    if (aEnds < 0 && bEnds < 0) return 0;
                    else if (aEnds < 0) return 1;
                    else if (bEnds < 0) return -1;
                    else return ByteBufferUtil.compare(
                        aBuf, aStarts, aOffset + VARSIZE_BEGINS + aEnds,
                        bBuf, bStarts, bOffset + VARSIZE_BEGINS + bEnds
                    );
                };
                case "color"      : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + (0x7fffffff & aBuf.getInt(aOffset + ENDPOS_COLOR - Integer.BYTES));
                    final int bStarts = bOffset + VARSIZE_BEGINS + (0x7fffffff & bBuf.getInt(bOffset + ENDPOS_COLOR - Integer.BYTES));
                    final int aEnds   = aBuf.getInt(aOffset + ENDPOS_COLOR);
                    final int bEnds   = bBuf.getInt(bOffset + ENDPOS_COLOR);
                    if (aEnds < 0 && bEnds < 0) return 0;
                    else if (aEnds < 0) return 1;
                    else if (bEnds < 0) return -1;
                    else return ByteBufferUtil.compare(
                        aBuf, aStarts, aOffset + VARSIZE_BEGINS + aEnds,
                        bBuf, bStarts, bOffset + VARSIZE_BEGINS + bEnds
                    );
                };
                case "cut_type"   : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + (0x7fffffff & aBuf.getInt(aOffset + ENDPOS_CUT_TYPE - Integer.BYTES));
                    final int bStarts = bOffset + VARSIZE_BEGINS + (0x7fffffff & bBuf.getInt(bOffset + ENDPOS_CUT_TYPE - Integer.BYTES));
                    final int aEnds   = aBuf.getInt(aOffset + ENDPOS_CUT_TYPE);
                    final int bEnds   = bBuf.getInt(bOffset + ENDPOS_CUT_TYPE);
                    if (aEnds < 0 && bEnds < 0) return 0;
                    else if (aEnds < 0) return 1;
                    else if (bEnds < 0) return -1;
                    else return ByteBufferUtil.compare(
                        aBuf, aStarts, aOffset + VARSIZE_BEGINS + aEnds,
                        bBuf, bStarts, bOffset + VARSIZE_BEGINS + bEnds
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongToIntFunction compareToByte(final ColumnIdentifier<Diamond> colId, final byte value) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type byte.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToShort(final ColumnIdentifier<Diamond> colId, final short value) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type short.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToInt(final ColumnIdentifier<Diamond> colId, final int value) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type int.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToLong(final ColumnIdentifier<Diamond> colId, final long value) {
        if ("id".equals(colId.getColumnId())) {
            {
                final long operand = value;
                return ref -> Long.compare(
                    bufferFinder.apply(ref).getLong(offsetFinder.applyAsInt(ref) + FIELD_ID),
                    operand
                );
            }
        }
        
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type long.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToFloat(final ColumnIdentifier<Diamond> colId, final float value) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type float.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToDouble(final ColumnIdentifier<Diamond> colId, final double value) {
        if (colId instanceof Diamond.Identifier) {
            final Diamond.Identifier _id = (Diamond.Identifier) colId;
            switch (_id) {
                case CARAT      : {
                    final double operand = value;
                    return ref -> Double.compare(
                        bufferFinder.apply(ref).getDouble(offsetFinder.applyAsInt(ref) + FIELD_CARAT),
                        operand
                    );
                }
                case DEPTH      : {
                    final double operand = value;
                    return ref -> {
                        final ByteBuffer buffer = bufferFinder.apply(ref);
                        final int offset = offsetFinder.applyAsInt(ref);
                        final int endPos = buffer.get(offset + ENDPOS_DEPTH);
                        if (endPos < 0) return 1;
                        else return Double.compare(
                            buffer.getDouble(offset + VARSIZE_BEGINS + endPos - Double.BYTES),
                            operand
                        );
                    };
                }
                case PRICE      : {
                    final double operand = value;
                    return ref -> {
                        final ByteBuffer buffer = bufferFinder.apply(ref);
                        final int offset = offsetFinder.applyAsInt(ref);
                        final int endPos = buffer.get(offset + ENDPOS_PRICE);
                        if (endPos < 0) return 1;
                        else return Double.compare(
                            buffer.getDouble(offset + VARSIZE_BEGINS + endPos - Double.BYTES),
                            operand
                        );
                    };
                }
                case TABLE_DATA : {
                    final double operand = value;
                    return ref -> {
                        final ByteBuffer buffer = bufferFinder.apply(ref);
                        final int offset = offsetFinder.applyAsInt(ref);
                        final int endPos = buffer.get(offset + ENDPOS_TABLE_DATA);
                        if (endPos < 0) return 1;
                        else return Double.compare(
                            buffer.getDouble(offset + VARSIZE_BEGINS + endPos - Double.BYTES),
                            operand
                        );
                    };
                }
                case X_FACTOR   : {
                    final double operand = value;
                    return ref -> {
                        final ByteBuffer buffer = bufferFinder.apply(ref);
                        final int offset = offsetFinder.applyAsInt(ref);
                        final int endPos = buffer.get(offset + ENDPOS_X_FACTOR);
                        if (endPos < 0) return 1;
                        else return Double.compare(
                            buffer.getDouble(offset + VARSIZE_BEGINS + endPos - Double.BYTES),
                            operand
                        );
                    };
                }
                case Y_FACTOR   : {
                    final double operand = value;
                    return ref -> {
                        final ByteBuffer buffer = bufferFinder.apply(ref);
                        final int offset = offsetFinder.applyAsInt(ref);
                        final int endPos = buffer.get(offset + ENDPOS_Y_FACTOR);
                        if (endPos < 0) return 1;
                        else return Double.compare(
                            buffer.getDouble(offset + VARSIZE_BEGINS + endPos - Double.BYTES),
                            operand
                        );
                    };
                }
                case Z_FACTOR   : {
                    final double operand = value;
                    return ref -> {
                        final ByteBuffer buffer = bufferFinder.apply(ref);
                        final int offset = offsetFinder.applyAsInt(ref);
                        final int endPos = buffer.get(offset + ENDPOS_Z_FACTOR);
                        if (endPos < 0) return 1;
                        else return Double.compare(
                            buffer.getDouble(offset + VARSIZE_BEGINS + endPos - Double.BYTES),
                            operand
                        );
                    };
                }
                default : {
                    throw new UnsupportedOperationException(
                        String.format("The column '%s' is either unknown or not of type double.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "carat"      : {
                    final double operand = value;
                    return ref -> Double.compare(
                        bufferFinder.apply(ref).getDouble(offsetFinder.applyAsInt(ref) + FIELD_CARAT),
                        operand
                    );
                }
                case "depth"      : {
                    final double operand = value;
                    return ref -> {
                        final ByteBuffer buffer = bufferFinder.apply(ref);
                        final int offset = offsetFinder.applyAsInt(ref);
                        final int endPos = buffer.get(offset + ENDPOS_DEPTH);
                        if (endPos < 0) return 1;
                        else return Double.compare(
                            buffer.getDouble(offset + VARSIZE_BEGINS + endPos - Double.BYTES),
                            operand
                        );
                    };
                }
                case "price"      : {
                    final double operand = value;
                    return ref -> {
                        final ByteBuffer buffer = bufferFinder.apply(ref);
                        final int offset = offsetFinder.applyAsInt(ref);
                        final int endPos = buffer.get(offset + ENDPOS_PRICE);
                        if (endPos < 0) return 1;
                        else return Double.compare(
                            buffer.getDouble(offset + VARSIZE_BEGINS + endPos - Double.BYTES),
                            operand
                        );
                    };
                }
                case "table_data" : {
                    final double operand = value;
                    return ref -> {
                        final ByteBuffer buffer = bufferFinder.apply(ref);
                        final int offset = offsetFinder.applyAsInt(ref);
                        final int endPos = buffer.get(offset + ENDPOS_TABLE_DATA);
                        if (endPos < 0) return 1;
                        else return Double.compare(
                            buffer.getDouble(offset + VARSIZE_BEGINS + endPos - Double.BYTES),
                            operand
                        );
                    };
                }
                case "x_factor"   : {
                    final double operand = value;
                    return ref -> {
                        final ByteBuffer buffer = bufferFinder.apply(ref);
                        final int offset = offsetFinder.applyAsInt(ref);
                        final int endPos = buffer.get(offset + ENDPOS_X_FACTOR);
                        if (endPos < 0) return 1;
                        else return Double.compare(
                            buffer.getDouble(offset + VARSIZE_BEGINS + endPos - Double.BYTES),
                            operand
                        );
                    };
                }
                case "y_factor"   : {
                    final double operand = value;
                    return ref -> {
                        final ByteBuffer buffer = bufferFinder.apply(ref);
                        final int offset = offsetFinder.applyAsInt(ref);
                        final int endPos = buffer.get(offset + ENDPOS_Y_FACTOR);
                        if (endPos < 0) return 1;
                        else return Double.compare(
                            buffer.getDouble(offset + VARSIZE_BEGINS + endPos - Double.BYTES),
                            operand
                        );
                    };
                }
                case "z_factor"   : {
                    final double operand = value;
                    return ref -> {
                        final ByteBuffer buffer = bufferFinder.apply(ref);
                        final int offset = offsetFinder.applyAsInt(ref);
                        final int endPos = buffer.get(offset + ENDPOS_Z_FACTOR);
                        if (endPos < 0) return 1;
                        else return Double.compare(
                            buffer.getDouble(offset + VARSIZE_BEGINS + endPos - Double.BYTES),
                            operand
                        );
                    };
                }
                default : {
                    throw new UnsupportedOperationException(
                        String.format("The column '%s' is either unknown or not of type double.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongToIntFunction compareToBoolean(final ColumnIdentifier<Diamond> colId, final boolean value) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type boolean.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToChar(final ColumnIdentifier<Diamond> colId, final char value) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type char.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToObject(final ColumnIdentifier<Diamond> colId, final Object value) {
        if (colId instanceof Diamond.Identifier) {
            final Diamond.Identifier _id = (Diamond.Identifier) colId;
            switch (_id) {
                case CLARITY  : {
                    final ByteBuffer tempBuffer = ByteBuffer.wrap(((String) value).getBytes());
                    final int tempSize = tempBuffer.capacity();
                    return ref -> {
                        final ByteBuffer buffer = bufferFinder.apply(ref);
                        final int offset = offsetFinder.applyAsInt(ref);
                        return ByteBufferUtil.compare(buffer,
                            offset + VARSIZE_BEGINS + (0x7f & buffer.get(offset + ENDPOS_CLARITY - Byte.BYTES)),
                            offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_CLARITY),
                            tempBuffer, 0, tempSize
                        );
                    };
                }
                case COLOR    : {
                    final ByteBuffer tempBuffer = ByteBuffer.wrap(((String) value).getBytes());
                    final int tempSize = tempBuffer.capacity();
                    return ref -> {
                        final ByteBuffer buffer = bufferFinder.apply(ref);
                        final int offset = offsetFinder.applyAsInt(ref);
                        return ByteBufferUtil.compare(buffer,
                            offset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(offset + ENDPOS_COLOR - Integer.BYTES)),
                            offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_COLOR),
                            tempBuffer, 0, tempSize
                        );
                    };
                }
                case CUT_TYPE : {
                    final ByteBuffer tempBuffer = ByteBuffer.wrap(((String) value).getBytes());
                    final int tempSize = tempBuffer.capacity();
                    return ref -> {
                        final ByteBuffer buffer = bufferFinder.apply(ref);
                        final int offset = offsetFinder.applyAsInt(ref);
                        return ByteBufferUtil.compare(buffer,
                            offset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(offset + ENDPOS_CUT_TYPE - Integer.BYTES)),
                            offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_CUT_TYPE),
                            tempBuffer, 0, tempSize
                        );
                    };
                }
                default : {
                    throw new UnsupportedOperationException(
                        String.format("The column '%s' is either unknown or not of type object.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "clarity"  : {
                    final ByteBuffer tempBuffer = ByteBuffer.wrap(((String) value).getBytes());
                    final int tempSize = tempBuffer.capacity();
                    return ref -> {
                        final ByteBuffer buffer = bufferFinder.apply(ref);
                        final int offset = offsetFinder.applyAsInt(ref);
                        return ByteBufferUtil.compare(buffer,
                            offset + VARSIZE_BEGINS + (0x7f & buffer.get(offset + ENDPOS_CLARITY - Byte.BYTES)),
                            offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_CLARITY),
                            tempBuffer, 0, tempSize
                        );
                    };
                }
                case "color"    : {
                    final ByteBuffer tempBuffer = ByteBuffer.wrap(((String) value).getBytes());
                    final int tempSize = tempBuffer.capacity();
                    return ref -> {
                        final ByteBuffer buffer = bufferFinder.apply(ref);
                        final int offset = offsetFinder.applyAsInt(ref);
                        return ByteBufferUtil.compare(buffer,
                            offset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(offset + ENDPOS_COLOR - Integer.BYTES)),
                            offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_COLOR),
                            tempBuffer, 0, tempSize
                        );
                    };
                }
                case "cut_type" : {
                    final ByteBuffer tempBuffer = ByteBuffer.wrap(((String) value).getBytes());
                    final int tempSize = tempBuffer.capacity();
                    return ref -> {
                        final ByteBuffer buffer = bufferFinder.apply(ref);
                        final int offset = offsetFinder.applyAsInt(ref);
                        return ByteBufferUtil.compare(buffer,
                            offset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(offset + ENDPOS_CUT_TYPE - Integer.BYTES)),
                            offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_CUT_TYPE),
                            tempBuffer, 0, tempSize
                        );
                    };
                }
                default : {
                    throw new UnsupportedOperationException(
                        String.format("The column '%s' is either unknown or not of type object.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongToIntFunction compareToNull(final ColumnIdentifier<Diamond> colId) {
        if (colId instanceof Diamond.Identifier) {
            final Diamond.Identifier _id = (Diamond.Identifier) colId;
            switch (_id) {
                case ID         : 
                case CARAT      : return ALWAYS_LESS;
                case DEPTH      : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    return buffer.get(offset + ENDPOS_DEPTH) < 0 ? 0 : -1;
                };
                case PRICE      : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    return buffer.get(offset + ENDPOS_PRICE) < 0 ? 0 : -1;
                };
                case TABLE_DATA : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    return buffer.get(offset + ENDPOS_TABLE_DATA) < 0 ? 0 : -1;
                };
                case X_FACTOR   : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    return buffer.get(offset + ENDPOS_X_FACTOR) < 0 ? 0 : -1;
                };
                case Y_FACTOR   : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    return buffer.get(offset + ENDPOS_Y_FACTOR) < 0 ? 0 : -1;
                };
                case Z_FACTOR   : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    return buffer.get(offset + ENDPOS_Z_FACTOR) < 0 ? 0 : -1;
                };
                case CLARITY    : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_CLARITY) < 0 ? 0 : -1;
                case COLOR      : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_COLOR) < 0 ? 0 : -1;
                case CUT_TYPE   : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_CUT_TYPE) < 0 ? 0 : -1;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "id"         : 
                case "carat"      : return ALWAYS_LESS;
                case "depth"      : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    return buffer.get(offset + ENDPOS_DEPTH) < 0 ? 0 : -1;
                };
                case "price"      : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    return buffer.get(offset + ENDPOS_PRICE) < 0 ? 0 : -1;
                };
                case "table_data" : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    return buffer.get(offset + ENDPOS_TABLE_DATA) < 0 ? 0 : -1;
                };
                case "x_factor"   : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    return buffer.get(offset + ENDPOS_X_FACTOR) < 0 ? 0 : -1;
                };
                case "y_factor"   : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    return buffer.get(offset + ENDPOS_Y_FACTOR) < 0 ? 0 : -1;
                };
                case "z_factor"   : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    return buffer.get(offset + ENDPOS_Z_FACTOR) < 0 ? 0 : -1;
                };
                case "clarity"    : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_CLARITY) < 0 ? 0 : -1;
                case "color"      : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_COLOR) < 0 ? 0 : -1;
                case "cut_type"   : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_CUT_TYPE) < 0 ? 0 : -1;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongPredicate newPredicate(final ColumnIdentifier<Diamond> colId, final EntityStorePredicate predicate) {
        if (colId instanceof Diamond.Identifier) {
            final Diamond.Identifier _id = (Diamond.Identifier) colId;
            switch (_id) {
                case ID         : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_ID;
                    return predicate.test(buffer, begins, begins + Long.BYTES);
                };
                case CARAT      : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_CARAT;
                    return predicate.test(buffer, begins, begins + Double.BYTES);
                };
                case DEPTH      : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return predicate.test(buffer,
                        rowOffset + VARSIZE_BEGINS,
                        rowOffset + VARSIZE_BEGINS + buffer.get(rowOffset + ENDPOS_DEPTH)
                    );
                };
                case PRICE      : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return predicate.test(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7f & buffer.get(rowOffset + ENDPOS_PRICE - Byte.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.get(rowOffset + ENDPOS_PRICE)
                    );
                };
                case TABLE_DATA : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return predicate.test(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7f & buffer.get(rowOffset + ENDPOS_TABLE_DATA - Byte.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.get(rowOffset + ENDPOS_TABLE_DATA)
                    );
                };
                case X_FACTOR   : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return predicate.test(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7f & buffer.get(rowOffset + ENDPOS_X_FACTOR - Byte.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.get(rowOffset + ENDPOS_X_FACTOR)
                    );
                };
                case Y_FACTOR   : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return predicate.test(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7f & buffer.get(rowOffset + ENDPOS_Y_FACTOR - Byte.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.get(rowOffset + ENDPOS_Y_FACTOR)
                    );
                };
                case Z_FACTOR   : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return predicate.test(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7f & buffer.get(rowOffset + ENDPOS_Z_FACTOR - Byte.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.get(rowOffset + ENDPOS_Z_FACTOR)
                    );
                };
                case CLARITY    : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return predicate.test(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7f & buffer.get(rowOffset + ENDPOS_CLARITY - Byte.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_CLARITY)
                    );
                };
                case COLOR      : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return predicate.test(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(rowOffset + ENDPOS_COLOR - Integer.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_COLOR)
                    );
                };
                case CUT_TYPE   : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return predicate.test(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(rowOffset + ENDPOS_CUT_TYPE - Integer.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_CUT_TYPE)
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "id"         : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_ID;
                    return predicate.test(buffer, begins, begins + Long.BYTES);
                };
                case "carat"      : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_CARAT;
                    return predicate.test(buffer, begins, begins + Double.BYTES);
                };
                case "depth"      : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return predicate.test(buffer,
                        rowOffset + VARSIZE_BEGINS,
                        rowOffset + VARSIZE_BEGINS + buffer.get(rowOffset + ENDPOS_DEPTH)
                    );
                };
                case "price"      : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return predicate.test(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7f & buffer.get(rowOffset + ENDPOS_PRICE - Byte.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.get(rowOffset + ENDPOS_PRICE)
                    );
                };
                case "table_data" : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return predicate.test(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7f & buffer.get(rowOffset + ENDPOS_TABLE_DATA - Byte.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.get(rowOffset + ENDPOS_TABLE_DATA)
                    );
                };
                case "x_factor"   : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return predicate.test(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7f & buffer.get(rowOffset + ENDPOS_X_FACTOR - Byte.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.get(rowOffset + ENDPOS_X_FACTOR)
                    );
                };
                case "y_factor"   : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return predicate.test(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7f & buffer.get(rowOffset + ENDPOS_Y_FACTOR - Byte.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.get(rowOffset + ENDPOS_Y_FACTOR)
                    );
                };
                case "z_factor"   : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return predicate.test(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7f & buffer.get(rowOffset + ENDPOS_Z_FACTOR - Byte.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.get(rowOffset + ENDPOS_Z_FACTOR)
                    );
                };
                case "clarity"    : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return predicate.test(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7f & buffer.get(rowOffset + ENDPOS_CLARITY - Byte.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_CLARITY)
                    );
                };
                case "color"      : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return predicate.test(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(rowOffset + ENDPOS_COLOR - Integer.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_COLOR)
                    );
                };
                case "cut_type"   : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return predicate.test(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(rowOffset + ENDPOS_CUT_TYPE - Integer.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_CUT_TYPE)
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongToIntFunction newCompareTo(final ColumnIdentifier<Diamond> colId, final EntityStoreCompareTo compareTo) {
        if (colId instanceof Diamond.Identifier) {
            final Diamond.Identifier _id = (Diamond.Identifier) colId;
            switch (_id) {
                case ID         : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_ID;
                    return compareTo.compare(buffer, begins, begins + Long.BYTES);
                };
                case CARAT      : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_CARAT;
                    return compareTo.compare(buffer, begins, begins + Double.BYTES);
                };
                case DEPTH      : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return compareTo.compare(buffer,
                        rowOffset + VARSIZE_BEGINS,
                        rowOffset + VARSIZE_BEGINS + buffer.get(rowOffset + ENDPOS_DEPTH)
                    );
                };
                case PRICE      : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return compareTo.compare(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7f & buffer.get(rowOffset + ENDPOS_PRICE - Byte.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.get(rowOffset + ENDPOS_PRICE)
                    );
                };
                case TABLE_DATA : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return compareTo.compare(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7f & buffer.get(rowOffset + ENDPOS_TABLE_DATA - Byte.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.get(rowOffset + ENDPOS_TABLE_DATA)
                    );
                };
                case X_FACTOR   : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return compareTo.compare(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7f & buffer.get(rowOffset + ENDPOS_X_FACTOR - Byte.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.get(rowOffset + ENDPOS_X_FACTOR)
                    );
                };
                case Y_FACTOR   : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return compareTo.compare(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7f & buffer.get(rowOffset + ENDPOS_Y_FACTOR - Byte.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.get(rowOffset + ENDPOS_Y_FACTOR)
                    );
                };
                case Z_FACTOR   : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return compareTo.compare(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7f & buffer.get(rowOffset + ENDPOS_Z_FACTOR - Byte.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.get(rowOffset + ENDPOS_Z_FACTOR)
                    );
                };
                case CLARITY    : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return compareTo.compare(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7f & buffer.get(rowOffset + ENDPOS_CLARITY - Byte.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_CLARITY)
                    );
                };
                case COLOR      : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return compareTo.compare(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(rowOffset + ENDPOS_COLOR - Integer.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_COLOR)
                    );
                };
                case CUT_TYPE   : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return compareTo.compare(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(rowOffset + ENDPOS_CUT_TYPE - Integer.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_CUT_TYPE)
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "id"         : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_ID;
                    return compareTo.compare(buffer, begins, begins + Long.BYTES);
                };
                case "carat"      : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_CARAT;
                    return compareTo.compare(buffer, begins, begins + Double.BYTES);
                };
                case "depth"      : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return compareTo.compare(buffer,
                        rowOffset + VARSIZE_BEGINS,
                        rowOffset + VARSIZE_BEGINS + buffer.get(rowOffset + ENDPOS_DEPTH)
                    );
                };
                case "price"      : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return compareTo.compare(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7f & buffer.get(rowOffset + ENDPOS_PRICE - Byte.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.get(rowOffset + ENDPOS_PRICE)
                    );
                };
                case "table_data" : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return compareTo.compare(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7f & buffer.get(rowOffset + ENDPOS_TABLE_DATA - Byte.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.get(rowOffset + ENDPOS_TABLE_DATA)
                    );
                };
                case "x_factor"   : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return compareTo.compare(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7f & buffer.get(rowOffset + ENDPOS_X_FACTOR - Byte.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.get(rowOffset + ENDPOS_X_FACTOR)
                    );
                };
                case "y_factor"   : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return compareTo.compare(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7f & buffer.get(rowOffset + ENDPOS_Y_FACTOR - Byte.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.get(rowOffset + ENDPOS_Y_FACTOR)
                    );
                };
                case "z_factor"   : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return compareTo.compare(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7f & buffer.get(rowOffset + ENDPOS_Z_FACTOR - Byte.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.get(rowOffset + ENDPOS_Z_FACTOR)
                    );
                };
                case "clarity"    : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return compareTo.compare(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7f & buffer.get(rowOffset + ENDPOS_CLARITY - Byte.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_CLARITY)
                    );
                };
                case "color"      : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return compareTo.compare(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(rowOffset + ENDPOS_COLOR - Integer.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_COLOR)
                    );
                };
                case "cut_type"   : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return compareTo.compare(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(rowOffset + ENDPOS_CUT_TYPE - Integer.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_CUT_TYPE)
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public BiLongToIntFunction newComparator(final ColumnIdentifier<Diamond> colId, final EntityStoreComparator comparator) {
        if (colId instanceof Diamond.Identifier) {
            final Diamond.Identifier _id = (Diamond.Identifier) colId;
            switch (_id) {
                case ID         : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    final int aBegins = aRowOffset + FIELD_ID;
                    final int bBegins = bRowOffset + FIELD_ID;
                    return comparator.compare(
                        aBuffer, aBegins, aBegins + Long.BYTES,
                        bBuffer, bBegins, bBegins + Long.BYTES
                    );
                };
                case CARAT      : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    final int aBegins = aRowOffset + FIELD_CARAT;
                    final int bBegins = bRowOffset + FIELD_CARAT;
                    return comparator.compare(
                        aBuffer, aBegins, aBegins + Double.BYTES,
                        bBuffer, bBegins, bBegins + Double.BYTES
                    );
                };
                case DEPTH      : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    return comparator.compare(
                        aBuffer, aRowOffset + VARSIZE_BEGINS, aRowOffset + VARSIZE_BEGINS + aBuffer.get(aRowOffset + ENDPOS_DEPTH), 
                        bBuffer, bRowOffset + VARSIZE_BEGINS, bRowOffset + VARSIZE_BEGINS + bBuffer.get(bRowOffset + ENDPOS_DEPTH)
                    );
                };
                case PRICE      : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    return comparator.compare(
                        aBuffer, aRowOffset + VARSIZE_BEGINS + (0x7f & aBuffer.get(aRowOffset + ENDPOS_PRICE - Byte.BYTES)), aRowOffset + VARSIZE_BEGINS + aBuffer.get(aRowOffset + ENDPOS_PRICE), 
                        bBuffer, bRowOffset + VARSIZE_BEGINS + (0x7f & bBuffer.get(bRowOffset + ENDPOS_PRICE - Byte.BYTES)), bRowOffset + VARSIZE_BEGINS + bBuffer.get(bRowOffset + ENDPOS_PRICE)
                    );
                };
                case TABLE_DATA : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    return comparator.compare(
                        aBuffer, aRowOffset + VARSIZE_BEGINS + (0x7f & aBuffer.get(aRowOffset + ENDPOS_TABLE_DATA - Byte.BYTES)), aRowOffset + VARSIZE_BEGINS + aBuffer.get(aRowOffset + ENDPOS_TABLE_DATA), 
                        bBuffer, bRowOffset + VARSIZE_BEGINS + (0x7f & bBuffer.get(bRowOffset + ENDPOS_TABLE_DATA - Byte.BYTES)), bRowOffset + VARSIZE_BEGINS + bBuffer.get(bRowOffset + ENDPOS_TABLE_DATA)
                    );
                };
                case X_FACTOR   : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    return comparator.compare(
                        aBuffer, aRowOffset + VARSIZE_BEGINS + (0x7f & aBuffer.get(aRowOffset + ENDPOS_X_FACTOR - Byte.BYTES)), aRowOffset + VARSIZE_BEGINS + aBuffer.get(aRowOffset + ENDPOS_X_FACTOR), 
                        bBuffer, bRowOffset + VARSIZE_BEGINS + (0x7f & bBuffer.get(bRowOffset + ENDPOS_X_FACTOR - Byte.BYTES)), bRowOffset + VARSIZE_BEGINS + bBuffer.get(bRowOffset + ENDPOS_X_FACTOR)
                    );
                };
                case Y_FACTOR   : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    return comparator.compare(
                        aBuffer, aRowOffset + VARSIZE_BEGINS + (0x7f & aBuffer.get(aRowOffset + ENDPOS_Y_FACTOR - Byte.BYTES)), aRowOffset + VARSIZE_BEGINS + aBuffer.get(aRowOffset + ENDPOS_Y_FACTOR), 
                        bBuffer, bRowOffset + VARSIZE_BEGINS + (0x7f & bBuffer.get(bRowOffset + ENDPOS_Y_FACTOR - Byte.BYTES)), bRowOffset + VARSIZE_BEGINS + bBuffer.get(bRowOffset + ENDPOS_Y_FACTOR)
                    );
                };
                case Z_FACTOR   : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    return comparator.compare(
                        aBuffer, aRowOffset + VARSIZE_BEGINS + (0x7f & aBuffer.get(aRowOffset + ENDPOS_Z_FACTOR - Byte.BYTES)), aRowOffset + VARSIZE_BEGINS + aBuffer.get(aRowOffset + ENDPOS_Z_FACTOR), 
                        bBuffer, bRowOffset + VARSIZE_BEGINS + (0x7f & bBuffer.get(bRowOffset + ENDPOS_Z_FACTOR - Byte.BYTES)), bRowOffset + VARSIZE_BEGINS + bBuffer.get(bRowOffset + ENDPOS_Z_FACTOR)
                    );
                };
                case CLARITY    : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    return comparator.compare(
                        aBuffer, aRowOffset + VARSIZE_BEGINS + (0x7f & aBuffer.get(aRowOffset + ENDPOS_CLARITY - Byte.BYTES)), aRowOffset + VARSIZE_BEGINS + aBuffer.getInt(aRowOffset + ENDPOS_CLARITY), 
                        bBuffer, bRowOffset + VARSIZE_BEGINS + (0x7f & bBuffer.get(bRowOffset + ENDPOS_CLARITY - Byte.BYTES)), bRowOffset + VARSIZE_BEGINS + bBuffer.getInt(bRowOffset + ENDPOS_CLARITY)
                    );
                };
                case COLOR      : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    return comparator.compare(
                        aBuffer, aRowOffset + VARSIZE_BEGINS + (0x7fffffff & aBuffer.getInt(aRowOffset + ENDPOS_COLOR - Integer.BYTES)), aRowOffset + VARSIZE_BEGINS + aBuffer.getInt(aRowOffset + ENDPOS_COLOR), 
                        bBuffer, bRowOffset + VARSIZE_BEGINS + (0x7fffffff & bBuffer.getInt(bRowOffset + ENDPOS_COLOR - Integer.BYTES)), bRowOffset + VARSIZE_BEGINS + bBuffer.getInt(bRowOffset + ENDPOS_COLOR)
                    );
                };
                case CUT_TYPE   : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    return comparator.compare(
                        aBuffer, aRowOffset + VARSIZE_BEGINS + (0x7fffffff & aBuffer.getInt(aRowOffset + ENDPOS_CUT_TYPE - Integer.BYTES)), aRowOffset + VARSIZE_BEGINS + aBuffer.getInt(aRowOffset + ENDPOS_CUT_TYPE), 
                        bBuffer, bRowOffset + VARSIZE_BEGINS + (0x7fffffff & bBuffer.getInt(bRowOffset + ENDPOS_CUT_TYPE - Integer.BYTES)), bRowOffset + VARSIZE_BEGINS + bBuffer.getInt(bRowOffset + ENDPOS_CUT_TYPE)
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "id"         : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    final int aBegins = aRowOffset + FIELD_ID;
                    final int bBegins = bRowOffset + FIELD_ID;
                    return comparator.compare(
                        aBuffer, aBegins, aBegins + Long.BYTES,
                        bBuffer, bBegins, bBegins + Long.BYTES
                    );
                };
                case "carat"      : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    final int aBegins = aRowOffset + FIELD_CARAT;
                    final int bBegins = bRowOffset + FIELD_CARAT;
                    return comparator.compare(
                        aBuffer, aBegins, aBegins + Double.BYTES,
                        bBuffer, bBegins, bBegins + Double.BYTES
                    );
                };
                case "depth"      : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    return comparator.compare(
                        aBuffer, aRowOffset + VARSIZE_BEGINS, aRowOffset + VARSIZE_BEGINS + aBuffer.get(aRowOffset + ENDPOS_DEPTH), 
                        bBuffer, bRowOffset + VARSIZE_BEGINS, bRowOffset + VARSIZE_BEGINS + bBuffer.get(bRowOffset + ENDPOS_DEPTH)
                    );
                };
                case "price"      : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    return comparator.compare(
                        aBuffer, aRowOffset + VARSIZE_BEGINS + (0x7f & aBuffer.get(aRowOffset + ENDPOS_PRICE - Byte.BYTES)), aRowOffset + VARSIZE_BEGINS + aBuffer.get(aRowOffset + ENDPOS_PRICE), 
                        bBuffer, bRowOffset + VARSIZE_BEGINS + (0x7f & bBuffer.get(bRowOffset + ENDPOS_PRICE - Byte.BYTES)), bRowOffset + VARSIZE_BEGINS + bBuffer.get(bRowOffset + ENDPOS_PRICE)
                    );
                };
                case "table_data" : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    return comparator.compare(
                        aBuffer, aRowOffset + VARSIZE_BEGINS + (0x7f & aBuffer.get(aRowOffset + ENDPOS_TABLE_DATA - Byte.BYTES)), aRowOffset + VARSIZE_BEGINS + aBuffer.get(aRowOffset + ENDPOS_TABLE_DATA), 
                        bBuffer, bRowOffset + VARSIZE_BEGINS + (0x7f & bBuffer.get(bRowOffset + ENDPOS_TABLE_DATA - Byte.BYTES)), bRowOffset + VARSIZE_BEGINS + bBuffer.get(bRowOffset + ENDPOS_TABLE_DATA)
                    );
                };
                case "x_factor"   : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    return comparator.compare(
                        aBuffer, aRowOffset + VARSIZE_BEGINS + (0x7f & aBuffer.get(aRowOffset + ENDPOS_X_FACTOR - Byte.BYTES)), aRowOffset + VARSIZE_BEGINS + aBuffer.get(aRowOffset + ENDPOS_X_FACTOR), 
                        bBuffer, bRowOffset + VARSIZE_BEGINS + (0x7f & bBuffer.get(bRowOffset + ENDPOS_X_FACTOR - Byte.BYTES)), bRowOffset + VARSIZE_BEGINS + bBuffer.get(bRowOffset + ENDPOS_X_FACTOR)
                    );
                };
                case "y_factor"   : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    return comparator.compare(
                        aBuffer, aRowOffset + VARSIZE_BEGINS + (0x7f & aBuffer.get(aRowOffset + ENDPOS_Y_FACTOR - Byte.BYTES)), aRowOffset + VARSIZE_BEGINS + aBuffer.get(aRowOffset + ENDPOS_Y_FACTOR), 
                        bBuffer, bRowOffset + VARSIZE_BEGINS + (0x7f & bBuffer.get(bRowOffset + ENDPOS_Y_FACTOR - Byte.BYTES)), bRowOffset + VARSIZE_BEGINS + bBuffer.get(bRowOffset + ENDPOS_Y_FACTOR)
                    );
                };
                case "z_factor"   : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    return comparator.compare(
                        aBuffer, aRowOffset + VARSIZE_BEGINS + (0x7f & aBuffer.get(aRowOffset + ENDPOS_Z_FACTOR - Byte.BYTES)), aRowOffset + VARSIZE_BEGINS + aBuffer.get(aRowOffset + ENDPOS_Z_FACTOR), 
                        bBuffer, bRowOffset + VARSIZE_BEGINS + (0x7f & bBuffer.get(bRowOffset + ENDPOS_Z_FACTOR - Byte.BYTES)), bRowOffset + VARSIZE_BEGINS + bBuffer.get(bRowOffset + ENDPOS_Z_FACTOR)
                    );
                };
                case "clarity"    : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    return comparator.compare(
                        aBuffer, aRowOffset + VARSIZE_BEGINS + (0x7f & aBuffer.get(aRowOffset + ENDPOS_CLARITY - Byte.BYTES)), aRowOffset + VARSIZE_BEGINS + aBuffer.getInt(aRowOffset + ENDPOS_CLARITY), 
                        bBuffer, bRowOffset + VARSIZE_BEGINS + (0x7f & bBuffer.get(bRowOffset + ENDPOS_CLARITY - Byte.BYTES)), bRowOffset + VARSIZE_BEGINS + bBuffer.getInt(bRowOffset + ENDPOS_CLARITY)
                    );
                };
                case "color"      : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    return comparator.compare(
                        aBuffer, aRowOffset + VARSIZE_BEGINS + (0x7fffffff & aBuffer.getInt(aRowOffset + ENDPOS_COLOR - Integer.BYTES)), aRowOffset + VARSIZE_BEGINS + aBuffer.getInt(aRowOffset + ENDPOS_COLOR), 
                        bBuffer, bRowOffset + VARSIZE_BEGINS + (0x7fffffff & bBuffer.getInt(bRowOffset + ENDPOS_COLOR - Integer.BYTES)), bRowOffset + VARSIZE_BEGINS + bBuffer.getInt(bRowOffset + ENDPOS_COLOR)
                    );
                };
                case "cut_type"   : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    return comparator.compare(
                        aBuffer, aRowOffset + VARSIZE_BEGINS + (0x7fffffff & aBuffer.getInt(aRowOffset + ENDPOS_CUT_TYPE - Integer.BYTES)), aRowOffset + VARSIZE_BEGINS + aBuffer.getInt(aRowOffset + ENDPOS_CUT_TYPE), 
                        bBuffer, bRowOffset + VARSIZE_BEGINS + (0x7fffffff & bBuffer.getInt(bRowOffset + ENDPOS_CUT_TYPE - Integer.BYTES)), bRowOffset + VARSIZE_BEGINS + bBuffer.getInt(bRowOffset + ENDPOS_CUT_TYPE)
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongToIntFunction sizeOf() {
        return ref -> VARSIZE_BEGINS + Math.abs(bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_CUT_TYPE));
    }
}