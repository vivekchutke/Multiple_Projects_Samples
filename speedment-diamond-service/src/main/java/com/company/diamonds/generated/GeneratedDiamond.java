package com.company.diamonds.generated;

import com.company.diamonds.Diamond;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.enterprise.datastore.runtime.field.DatastoreFields;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.ComparableField;
import com.speedment.runtime.field.DoubleField;
import com.speedment.runtime.field.LongField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;

import java.util.Optional;
import java.util.OptionalDouble;

/**
 * The generated base for the {@link com.company.diamonds.Diamond}-interface
 * representing entities of the {@code diamond}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedDiamond {
    
    /**
     * This Field corresponds to the {@link Diamond} field that can be obtained
     * using the {@link Diamond#getId()} method.
     */
    LongField<Diamond, Long> ID = DatastoreFields.createLongField(
        Identifier.ID,
        Diamond::getId,
        Diamond::setId,
        TypeMapper.primitive(),
        true
    );
    /**
     * This Field corresponds to the {@link Diamond} field that can be obtained
     * using the {@link Diamond#getCarat()} method.
     */
    DoubleField<Diamond, Double> CARAT = DatastoreFields.createDoubleField(
        Identifier.CARAT,
        Diamond::getCarat,
        Diamond::setCarat,
        TypeMapper.primitive(),
        false
    );
    /**
     * This Field corresponds to the {@link Diamond} field that can be obtained
     * using the {@link Diamond#getClarity()} method.
     */
    StringField<Diamond, String> CLARITY = DatastoreFields.createStringField(
        Identifier.CLARITY,
        o -> OptionalUtil.unwrap(o.getClarity()),
        Diamond::setClarity,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Diamond} field that can be obtained
     * using the {@link Diamond#getColor()} method.
     */
    StringField<Diamond, String> COLOR = DatastoreFields.createStringField(
        Identifier.COLOR,
        o -> OptionalUtil.unwrap(o.getColor()),
        Diamond::setColor,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Diamond} field that can be obtained
     * using the {@link Diamond#getCutType()} method.
     */
    StringField<Diamond, String> CUT_TYPE = DatastoreFields.createStringField(
        Identifier.CUT_TYPE,
        o -> OptionalUtil.unwrap(o.getCutType()),
        Diamond::setCutType,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Diamond} field that can be obtained
     * using the {@link Diamond#getDepth()} method.
     */
    ComparableField<Diamond, Double, Double> DEPTH = DatastoreFields.createComparableField(
        Identifier.DEPTH,
        o -> OptionalUtil.unwrap(o.getDepth()),
        Diamond::setDepth,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Diamond} field that can be obtained
     * using the {@link Diamond#getPrice()} method.
     */
    ComparableField<Diamond, Double, Double> PRICE = DatastoreFields.createComparableField(
        Identifier.PRICE,
        o -> OptionalUtil.unwrap(o.getPrice()),
        Diamond::setPrice,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Diamond} field that can be obtained
     * using the {@link Diamond#getTableData()} method.
     */
    ComparableField<Diamond, Double, Double> TABLE_DATA = DatastoreFields.createComparableField(
        Identifier.TABLE_DATA,
        o -> OptionalUtil.unwrap(o.getTableData()),
        Diamond::setTableData,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Diamond} field that can be obtained
     * using the {@link Diamond#getXFactor()} method.
     */
    ComparableField<Diamond, Double, Double> X_FACTOR = DatastoreFields.createComparableField(
        Identifier.X_FACTOR,
        o -> OptionalUtil.unwrap(o.getXFactor()),
        Diamond::setXFactor,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Diamond} field that can be obtained
     * using the {@link Diamond#getYFactor()} method.
     */
    ComparableField<Diamond, Double, Double> Y_FACTOR = DatastoreFields.createComparableField(
        Identifier.Y_FACTOR,
        o -> OptionalUtil.unwrap(o.getYFactor()),
        Diamond::setYFactor,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Diamond} field that can be obtained
     * using the {@link Diamond#getZFactor()} method.
     */
    ComparableField<Diamond, Double, Double> Z_FACTOR = DatastoreFields.createComparableField(
        Identifier.Z_FACTOR,
        o -> OptionalUtil.unwrap(o.getZFactor()),
        Diamond::setZFactor,
        TypeMapper.identity(),
        false
    );
    
    /**
     * Returns the id of this Diamond. The id field corresponds to the database
     * column diamonds.diamonds.diamond.id.
     * 
     * @return the id of this Diamond
     */
    long getId();
    
    /**
     * Returns the carat of this Diamond. The carat field corresponds to the
     * database column diamonds.diamonds.diamond.carat.
     * 
     * @return the carat of this Diamond
     */
    double getCarat();
    
    /**
     * Returns the clarity of this Diamond. The clarity field corresponds to the
     * database column diamonds.diamonds.diamond.clarity.
     * 
     * @return the clarity of this Diamond
     */
    Optional<String> getClarity();
    
    /**
     * Returns the color of this Diamond. The color field corresponds to the
     * database column diamonds.diamonds.diamond.color.
     * 
     * @return the color of this Diamond
     */
    Optional<String> getColor();
    
    /**
     * Returns the cutType of this Diamond. The cutType field corresponds to the
     * database column diamonds.diamonds.diamond.cut_type.
     * 
     * @return the cutType of this Diamond
     */
    Optional<String> getCutType();
    
    /**
     * Returns the depth of this Diamond. The depth field corresponds to the
     * database column diamonds.diamonds.diamond.depth.
     * 
     * @return the depth of this Diamond
     */
    OptionalDouble getDepth();
    
    /**
     * Returns the price of this Diamond. The price field corresponds to the
     * database column diamonds.diamonds.diamond.price.
     * 
     * @return the price of this Diamond
     */
    OptionalDouble getPrice();
    
    /**
     * Returns the tableData of this Diamond. The tableData field corresponds to
     * the database column diamonds.diamonds.diamond.table_data.
     * 
     * @return the tableData of this Diamond
     */
    OptionalDouble getTableData();
    
    /**
     * Returns the xFactor of this Diamond. The xFactor field corresponds to the
     * database column diamonds.diamonds.diamond.x_factor.
     * 
     * @return the xFactor of this Diamond
     */
    OptionalDouble getXFactor();
    
    /**
     * Returns the yFactor of this Diamond. The yFactor field corresponds to the
     * database column diamonds.diamonds.diamond.y_factor.
     * 
     * @return the yFactor of this Diamond
     */
    OptionalDouble getYFactor();
    
    /**
     * Returns the zFactor of this Diamond. The zFactor field corresponds to the
     * database column diamonds.diamonds.diamond.z_factor.
     * 
     * @return the zFactor of this Diamond
     */
    OptionalDouble getZFactor();
    
    /**
     * Sets the id of this Diamond. The id field corresponds to the database
     * column diamonds.diamonds.diamond.id.
     * 
     * @param id to set of this Diamond
     * @return   this Diamond instance
     */
    Diamond setId(long id);
    
    /**
     * Sets the carat of this Diamond. The carat field corresponds to the
     * database column diamonds.diamonds.diamond.carat.
     * 
     * @param carat to set of this Diamond
     * @return      this Diamond instance
     */
    Diamond setCarat(double carat);
    
    /**
     * Sets the clarity of this Diamond. The clarity field corresponds to the
     * database column diamonds.diamonds.diamond.clarity.
     * 
     * @param clarity to set of this Diamond
     * @return        this Diamond instance
     */
    Diamond setClarity(String clarity);
    
    /**
     * Sets the color of this Diamond. The color field corresponds to the
     * database column diamonds.diamonds.diamond.color.
     * 
     * @param color to set of this Diamond
     * @return      this Diamond instance
     */
    Diamond setColor(String color);
    
    /**
     * Sets the cutType of this Diamond. The cutType field corresponds to the
     * database column diamonds.diamonds.diamond.cut_type.
     * 
     * @param cutType to set of this Diamond
     * @return        this Diamond instance
     */
    Diamond setCutType(String cutType);
    
    /**
     * Sets the depth of this Diamond. The depth field corresponds to the
     * database column diamonds.diamonds.diamond.depth.
     * 
     * @param depth to set of this Diamond
     * @return      this Diamond instance
     */
    Diamond setDepth(Double depth);
    
    /**
     * Sets the price of this Diamond. The price field corresponds to the
     * database column diamonds.diamonds.diamond.price.
     * 
     * @param price to set of this Diamond
     * @return      this Diamond instance
     */
    Diamond setPrice(Double price);
    
    /**
     * Sets the tableData of this Diamond. The tableData field corresponds to
     * the database column diamonds.diamonds.diamond.table_data.
     * 
     * @param tableData to set of this Diamond
     * @return          this Diamond instance
     */
    Diamond setTableData(Double tableData);
    
    /**
     * Sets the xFactor of this Diamond. The xFactor field corresponds to the
     * database column diamonds.diamonds.diamond.x_factor.
     * 
     * @param xFactor to set of this Diamond
     * @return        this Diamond instance
     */
    Diamond setXFactor(Double xFactor);
    
    /**
     * Sets the yFactor of this Diamond. The yFactor field corresponds to the
     * database column diamonds.diamonds.diamond.y_factor.
     * 
     * @param yFactor to set of this Diamond
     * @return        this Diamond instance
     */
    Diamond setYFactor(Double yFactor);
    
    /**
     * Sets the zFactor of this Diamond. The zFactor field corresponds to the
     * database column diamonds.diamonds.diamond.z_factor.
     * 
     * @param zFactor to set of this Diamond
     * @return        this Diamond instance
     */
    Diamond setZFactor(Double zFactor);
    
    enum Identifier implements ColumnIdentifier<Diamond> {
        
        ID         ("id"),
        CARAT      ("carat"),
        CLARITY    ("clarity"),
        COLOR      ("color"),
        CUT_TYPE   ("cut_type"),
        DEPTH      ("depth"),
        PRICE      ("price"),
        TABLE_DATA ("table_data"),
        X_FACTOR   ("x_factor"),
        Y_FACTOR   ("y_factor"),
        Z_FACTOR   ("z_factor");
        
        private final String columnId;
        private final TableIdentifier<Diamond> tableIdentifier;
        
        Identifier(String columnId) {
            this.columnId        = columnId;
            this.tableIdentifier = TableIdentifier.of(    getDbmsId(), 
                getSchemaId(), 
                getTableId());
        }
        
        @Override
        public String getDbmsId() {
            return "diamonds";
        }
        
        @Override
        public String getSchemaId() {
            return "diamonds";
        }
        
        @Override
        public String getTableId() {
            return "diamond";
        }
        
        @Override
        public String getColumnId() {
            return this.columnId;
        }
        
        @Override
        public TableIdentifier<Diamond> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}