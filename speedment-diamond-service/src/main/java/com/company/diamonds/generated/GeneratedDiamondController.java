package com.company.diamonds.generated;

import com.company.diamonds.Diamond;
import com.company.diamonds.DiamondManager;
import com.company.diamonds.generated.GeneratedDiamond.Identifier;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.common.collection.LongCache;
import com.speedment.common.json.Json;
import com.speedment.enterprise.plugins.json.JsonCollectors;
import com.speedment.enterprise.plugins.json.JsonComponent;
import com.speedment.enterprise.plugins.json.JsonEncoder;
import com.speedment.enterprise.plugins.spring.runtime.AbstractFilter;
import com.speedment.enterprise.plugins.spring.runtime.AbstractSort;
import com.speedment.enterprise.plugins.spring.runtime.ControllerUtil;
import com.speedment.runtime.field.Field;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseStatus;

import java.util.Comparator;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.Set;
import java.util.function.Predicate;
import java.util.stream.Stream;
import javax.annotation.PostConstruct;

import static java.util.stream.Collectors.toList;

/**
 * The default REST controller logic for Diamond entities.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
@CrossOrigin(origins = "*", maxAge = 3600)
@RequestMapping("/diamonds")
public abstract class GeneratedDiamondController {
    
    protected @Autowired JsonComponent jsonComponent;
    protected @Autowired DiamondManager manager;
    protected JsonEncoder<Diamond> encoder;
    protected final LongCache<String> totalCache = new LongCache<>(1024);
    
    @PostConstruct
    void createDiamondEncoder() {
        encoder = jsonComponent.<Diamond>emptyEncoder()
            .put("id", Diamond.ID)
            .put("carat", Diamond.CARAT)
            .put("clarity", Diamond.CLARITY)
            .put("color", Diamond.COLOR)
            .put("cutType", Diamond.CUT_TYPE)
            .put("depth", Diamond.DEPTH)
            .put("price", Diamond.PRICE)
            .put("tableData", Diamond.TABLE_DATA)
            .put("xFactor", Diamond.X_FACTOR)
            .put("yFactor", Diamond.Y_FACTOR)
            .put("zFactor", Diamond.Z_FACTOR)
            .build();
    }
    
    @GetMapping(path = "/diamond", produces = "application/json")
    public String get(
            @RequestParam(name = "filter", defaultValue = "[]") String filters,
            @RequestParam(name = "sort", defaultValue = "[]") String sorters,
            @RequestParam(value = "start", defaultValue = "0") long start,
            @RequestParam(value = "limit", defaultValue = "25") long limit) {
        
        return getHelper(
            filters,
            ControllerUtil.parseFilters(filters, DiamondFilter::new).collect(toList()),
            ControllerUtil.parseSorts(sorters, DiamondSort::new).collect(toList()),
            start,
            limit
        );
    }
    
    @ResponseStatus(code = HttpStatus.CREATED)
    @PostMapping(path = "/diamond", consumes = "application/json")
    public void create(
            @RequestBody @Validated CreateBody createBody) {
        manager.persist(manager.create()
            .setId(createBody.getId())
            .setCarat(createBody.getCarat())
            .setClarity(createBody.getClarity())
            .setColor(createBody.getColor())
            .setCutType(createBody.getCutType())
            .setDepth(createBody.getDepth())
            .setPrice(createBody.getPrice())
            .setTableData(createBody.getTableData())
            .setXFactor(createBody.getXFactor())
            .setYFactor(createBody.getYFactor())
            .setZFactor(createBody.getZFactor())
        );
    }
    
    @ResponseStatus(code = HttpStatus.OK)
    @PatchMapping(path = "/diamond/{id}", consumes = "application/json")
    public void update(
            @PathVariable(name = "id") long id,
            @RequestBody @Validated UpdateBody updateBody) {
        manager.stream()
            .filter(Diamond.ID.equal(id))
            .map(diamond -> {
                diamond.setId(updateBody.getId());
                diamond.setCarat(updateBody.getCarat());
                diamond.setClarity(updateBody.getClarity());
                diamond.setColor(updateBody.getColor());
                diamond.setCutType(updateBody.getCutType());
                diamond.setDepth(updateBody.getDepth());
                diamond.setPrice(updateBody.getPrice());
                diamond.setTableData(updateBody.getTableData());
                diamond.setXFactor(updateBody.getXFactor());
                diamond.setYFactor(updateBody.getYFactor());
                diamond.setZFactor(updateBody.getZFactor());
                return diamond;
        }).forEach(manager.updater());
    }
    
    @ResponseStatus(code = HttpStatus.NO_CONTENT)
    @DeleteMapping(path = "/diamond/{id}")
    public void delete(
            @PathVariable(name = "id") long id) {
        manager.stream()
            .filter(Diamond.ID.equal(id))
            .forEach(manager.remover());
    }
    
    @ExceptionHandler(JsonMappingException.class)
    @ResponseStatus(HttpStatus.BAD_REQUEST)
    public String handleMissingValueError() {
        Map<String, Object> error = new HashMap<>();
        error.put("error", "Bad Request");
        error.put("status", 400);
        error.put("message", "Invalid request body: missing required fields");
        
        return Json.toJson(error, true);
    }
    
    @ExceptionHandler(JsonParseException.class)
    @ResponseStatus(HttpStatus.BAD_REQUEST)
    public String handleInvalidJsonError() {
        Map<String, Object> error = new HashMap<>();
        error.put("error", "Bad Request");
        error.put("status", 400);
        error.put("message", "Invalid request body: invalid JSON syntax");
        
        return Json.toJson(error, true);
    }
    
    protected final Set<Identifier> parseColumns(String jsonColumnList) {
        try {
            @SuppressWarnings("unchecked")
            final List<String> parsed = (List<String>) Json.fromJson(jsonColumnList);
            final Set<GeneratedDiamond.Identifier> result = EnumSet.noneOf(GeneratedDiamond.Identifier.class);
            parsed.stream().map(this::parseColumn).forEach(result::add);
            return result;
        } catch (final ClassCastException ex) {
            throw new IllegalArgumentException("Error in parsed JSON.");
        }
    }
    
    protected final Identifier parseColumn(String jsonColumn) {
        switch (jsonColumn) {
            case "id":        return GeneratedDiamond.Identifier.ID;
            case "carat":     return GeneratedDiamond.Identifier.CARAT;
            case "clarity":   return GeneratedDiamond.Identifier.CLARITY;
            case "color":     return GeneratedDiamond.Identifier.COLOR;
            case "cutType":   return GeneratedDiamond.Identifier.CUT_TYPE;
            case "depth":     return GeneratedDiamond.Identifier.DEPTH;
            case "price":     return GeneratedDiamond.Identifier.PRICE;
            case "tableData": return GeneratedDiamond.Identifier.TABLE_DATA;
            case "xFactor":   return GeneratedDiamond.Identifier.X_FACTOR;
            case "yFactor":   return GeneratedDiamond.Identifier.Y_FACTOR;
            case "zFactor":   return GeneratedDiamond.Identifier.Z_FACTOR;
            default: throw new IllegalArgumentException(
                "Unknown column '" + jsonColumn + "'."
            );
        }
    }
    
    protected final Field<Diamond> fieldOf(Identifier columnId) {
        switch (columnId) {
            case ID:         return Diamond.ID;
            case CARAT:      return Diamond.CARAT;
            case CLARITY:    return Diamond.CLARITY;
            case COLOR:      return Diamond.COLOR;
            case CUT_TYPE:   return Diamond.CUT_TYPE;
            case DEPTH:      return Diamond.DEPTH;
            case PRICE:      return Diamond.PRICE;
            case TABLE_DATA: return Diamond.TABLE_DATA;
            case X_FACTOR:   return Diamond.X_FACTOR;
            case Y_FACTOR:   return Diamond.Y_FACTOR;
            case Z_FACTOR:   return Diamond.Z_FACTOR;
            default: throw new IllegalArgumentException(
                "Unknown column '" + columnId + "'."
            );
        }
    }
    
    protected String getHelper(
            String filterKey,
            List<Predicate<Diamond>> predicates,
            List<Comparator<Diamond>> sorters,
            long start,
            long limit) {
        
        Stream<Diamond> stream      = manager.stream();
        Stream<Diamond> totalStream = manager.stream();
        
        for (final Predicate<Diamond> predicate : predicates) {
            stream      = stream.filter(predicate);
            totalStream = totalStream.filter(predicate);
        }
        
        if (!sorters.isEmpty()) {
            final Optional<Comparator<Diamond>> comparator = sorters.stream()
                .reduce(Comparator::thenComparing);
            
            stream = stream.sorted(comparator.get());
        }
        
        final String total = String.valueOf(totalCache.getOrCompute(filterKey, totalStream::count));
        return stream
            .skip(start)
            .limit(limit)
            .collect(jsonComponent.collector(Diamond.class)
                .put("total", () -> total)
                .put("data", JsonCollectors.toList(encoder))
                .build()
            );
    }
    
    /**
     * How to filter the results from the controller. This class is designed to
     * be deserialized automatically from JSON.
     */
    public static final class DiamondFilter extends AbstractFilter<Diamond> {
        
        public DiamondFilter(
                String operator,
                String property,
                String value) {
            super(operator, property, value);
        }
        
        @Override
        public Predicate<Diamond> toPredicate() {
            switch (property()) {
                case "id" : {
                    final long v = Long.parseLong(value());
                    switch (operator()) {
                        case "eq"   : return Diamond.ID.equal(v);
                        case "ne"   : return Diamond.ID.notEqual(v);
                        case "lt"   : return Diamond.ID.lessThan(v);
                        case "le"   : return Diamond.ID.lessOrEqual(v);
                        case "gt"   : return Diamond.ID.greaterThan(v);
                        case "ge"   : return Diamond.ID.greaterOrEqual(v);
                        case "like" : // Fallthrough
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Diamond.id."
                        );
                    }
                }
                case "carat" : {
                    final double v = Double.parseDouble(value());
                    switch (operator()) {
                        case "eq"   : return Diamond.CARAT.equal(v);
                        case "ne"   : return Diamond.CARAT.notEqual(v);
                        case "lt"   : return Diamond.CARAT.lessThan(v);
                        case "le"   : return Diamond.CARAT.lessOrEqual(v);
                        case "gt"   : return Diamond.CARAT.greaterThan(v);
                        case "ge"   : return Diamond.CARAT.greaterOrEqual(v);
                        case "like" : // Fallthrough
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Diamond.carat."
                        );
                    }
                }
                case "clarity" : {
                    final String v = value();
                    switch (operator()) {
                        case "eq"   : return Diamond.CLARITY.equal(v);
                        case "ne"   : return Diamond.CLARITY.notEqual(v);
                        case "lt"   : return Diamond.CLARITY.lessThan(v);
                        case "le"   : return Diamond.CLARITY.lessOrEqual(v);
                        case "gt"   : return Diamond.CLARITY.greaterThan(v);
                        case "ge"   : return Diamond.CLARITY.greaterOrEqual(v);
                        case "like" : return Diamond.CLARITY.contains(v);
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Diamond.clarity."
                        );
                    }
                }
                case "color" : {
                    final String v = value();
                    switch (operator()) {
                        case "eq"   : return Diamond.COLOR.equal(v);
                        case "ne"   : return Diamond.COLOR.notEqual(v);
                        case "lt"   : return Diamond.COLOR.lessThan(v);
                        case "le"   : return Diamond.COLOR.lessOrEqual(v);
                        case "gt"   : return Diamond.COLOR.greaterThan(v);
                        case "ge"   : return Diamond.COLOR.greaterOrEqual(v);
                        case "like" : return Diamond.COLOR.contains(v);
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Diamond.color."
                        );
                    }
                }
                case "cutType" : {
                    final String v = value();
                    switch (operator()) {
                        case "eq"   : return Diamond.CUT_TYPE.equal(v);
                        case "ne"   : return Diamond.CUT_TYPE.notEqual(v);
                        case "lt"   : return Diamond.CUT_TYPE.lessThan(v);
                        case "le"   : return Diamond.CUT_TYPE.lessOrEqual(v);
                        case "gt"   : return Diamond.CUT_TYPE.greaterThan(v);
                        case "ge"   : return Diamond.CUT_TYPE.greaterOrEqual(v);
                        case "like" : return Diamond.CUT_TYPE.contains(v);
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Diamond.cutType."
                        );
                    }
                }
                case "depth" : {
                    final Double v = Double.parseDouble(value());
                    switch (operator()) {
                        case "eq"   : return Diamond.DEPTH.equal(v);
                        case "ne"   : return Diamond.DEPTH.notEqual(v);
                        case "lt"   : return Diamond.DEPTH.lessThan(v);
                        case "le"   : return Diamond.DEPTH.lessOrEqual(v);
                        case "gt"   : return Diamond.DEPTH.greaterThan(v);
                        case "ge"   : return Diamond.DEPTH.greaterOrEqual(v);
                        case "like" : // Fallthrough
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Diamond.depth."
                        );
                    }
                }
                case "price" : {
                    final Double v = Double.parseDouble(value());
                    switch (operator()) {
                        case "eq"   : return Diamond.PRICE.equal(v);
                        case "ne"   : return Diamond.PRICE.notEqual(v);
                        case "lt"   : return Diamond.PRICE.lessThan(v);
                        case "le"   : return Diamond.PRICE.lessOrEqual(v);
                        case "gt"   : return Diamond.PRICE.greaterThan(v);
                        case "ge"   : return Diamond.PRICE.greaterOrEqual(v);
                        case "like" : // Fallthrough
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Diamond.price."
                        );
                    }
                }
                case "tableData" : {
                    final Double v = Double.parseDouble(value());
                    switch (operator()) {
                        case "eq"   : return Diamond.TABLE_DATA.equal(v);
                        case "ne"   : return Diamond.TABLE_DATA.notEqual(v);
                        case "lt"   : return Diamond.TABLE_DATA.lessThan(v);
                        case "le"   : return Diamond.TABLE_DATA.lessOrEqual(v);
                        case "gt"   : return Diamond.TABLE_DATA.greaterThan(v);
                        case "ge"   : return Diamond.TABLE_DATA.greaterOrEqual(v);
                        case "like" : // Fallthrough
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Diamond.tableData."
                        );
                    }
                }
                case "xFactor" : {
                    final Double v = Double.parseDouble(value());
                    switch (operator()) {
                        case "eq"   : return Diamond.X_FACTOR.equal(v);
                        case "ne"   : return Diamond.X_FACTOR.notEqual(v);
                        case "lt"   : return Diamond.X_FACTOR.lessThan(v);
                        case "le"   : return Diamond.X_FACTOR.lessOrEqual(v);
                        case "gt"   : return Diamond.X_FACTOR.greaterThan(v);
                        case "ge"   : return Diamond.X_FACTOR.greaterOrEqual(v);
                        case "like" : // Fallthrough
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Diamond.xFactor."
                        );
                    }
                }
                case "yFactor" : {
                    final Double v = Double.parseDouble(value());
                    switch (operator()) {
                        case "eq"   : return Diamond.Y_FACTOR.equal(v);
                        case "ne"   : return Diamond.Y_FACTOR.notEqual(v);
                        case "lt"   : return Diamond.Y_FACTOR.lessThan(v);
                        case "le"   : return Diamond.Y_FACTOR.lessOrEqual(v);
                        case "gt"   : return Diamond.Y_FACTOR.greaterThan(v);
                        case "ge"   : return Diamond.Y_FACTOR.greaterOrEqual(v);
                        case "like" : // Fallthrough
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Diamond.yFactor."
                        );
                    }
                }
                case "zFactor" : {
                    final Double v = Double.parseDouble(value());
                    switch (operator()) {
                        case "eq"   : return Diamond.Z_FACTOR.equal(v);
                        case "ne"   : return Diamond.Z_FACTOR.notEqual(v);
                        case "lt"   : return Diamond.Z_FACTOR.lessThan(v);
                        case "le"   : return Diamond.Z_FACTOR.lessOrEqual(v);
                        case "gt"   : return Diamond.Z_FACTOR.greaterThan(v);
                        case "ge"   : return Diamond.Z_FACTOR.greaterOrEqual(v);
                        case "like" : // Fallthrough
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Diamond.zFactor."
                        );
                    }
                }
                default : throw new IllegalArgumentException(
                    "'" + property() + "' is not a valid Diamond property."
                );
            }
        }
    }
    
    /**
     * How to sort the results from the controller. This class is designed to be
     * deserialized automatically from JSON.
     */
    public static final class DiamondSort extends AbstractSort<Diamond> {
        
        public DiamondSort(String property, String direction) {
            super(property, direction);
        }
        
        @Override
        public Comparator<Diamond> toComparator() {
            final Comparator<Diamond> comparator;
            switch (property()) {
                case "id"        : comparator = Diamond.ID.comparator();         break;
                case "carat"     : comparator = Diamond.CARAT.comparator();      break;
                case "clarity"   : comparator = Diamond.CLARITY.comparator();    break;
                case "color"     : comparator = Diamond.COLOR.comparator();      break;
                case "cutType"   : comparator = Diamond.CUT_TYPE.comparator();   break;
                case "depth"     : comparator = Diamond.DEPTH.comparator();      break;
                case "price"     : comparator = Diamond.PRICE.comparator();      break;
                case "tableData" : comparator = Diamond.TABLE_DATA.comparator(); break;
                case "xFactor"   : comparator = Diamond.X_FACTOR.comparator();   break;
                case "yFactor"   : comparator = Diamond.Y_FACTOR.comparator();   break;
                case "zFactor"   : comparator = Diamond.Z_FACTOR.comparator();   break;
                default : throw new IllegalArgumentException(
                    "'" + property() + "' is not a valid Diamond property."
                );
            }
            
            switch (direction()) {
                case "ASC"  : return comparator;
                case "DESC" : return comparator.reversed();
                default : throw new IllegalArgumentException(
                    "'" + direction() + "' is not a valid sort direction. " +
                    "Use either 'ASC' or 'DESC', or leave out."
                );
            }
        }
    }
    
    @JsonInclude(Include.NON_NULL)
    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class CreateBody {
        
        private final long id;
        private final double carat;
        private final String clarity;
        private final String color;
        private final String cutType;
        private final Double depth;
        private final Double price;
        private final Double tableData;
        private final Double xFactor;
        private final Double yFactor;
        private final Double zFactor;
        
        @JsonCreator
        public CreateBody(
                @JsonProperty("id") Long id,
                @JsonProperty("carat") Double carat,
                @JsonProperty("clarity") String clarity,
                @JsonProperty("color") String color,
                @JsonProperty("cutType") String cutType,
                @JsonProperty("depth") Double depth,
                @JsonProperty("price") Double price,
                @JsonProperty("tableData") Double tableData,
                @JsonProperty("xFactor") Double xFactor,
                @JsonProperty("yFactor") Double yFactor,
                @JsonProperty("zFactor") Double zFactor) {
            this.id = Objects.requireNonNull(id, "`id` is required");
            this.carat = Objects.requireNonNull(carat, "`carat` is required");
            this.clarity = Objects.requireNonNull(clarity, "`clarity` is required");
            this.color = Objects.requireNonNull(color, "`color` is required");
            this.cutType = Objects.requireNonNull(cutType, "`cutType` is required");
            this.depth = Objects.requireNonNull(depth, "`depth` is required");
            this.price = Objects.requireNonNull(price, "`price` is required");
            this.tableData = Objects.requireNonNull(tableData, "`tableData` is required");
            this.xFactor = Objects.requireNonNull(xFactor, "`xFactor` is required");
            this.yFactor = Objects.requireNonNull(yFactor, "`yFactor` is required");
            this.zFactor = Objects.requireNonNull(zFactor, "`zFactor` is required");
        }
        
        public long getId() {
            return this.id;
        }
        
        public double getCarat() {
            return this.carat;
        }
        
        public String getClarity() {
            return this.clarity;
        }
        
        public String getColor() {
            return this.color;
        }
        
        public String getCutType() {
            return this.cutType;
        }
        
        public Double getDepth() {
            return this.depth;
        }
        
        public Double getPrice() {
            return this.price;
        }
        
        public Double getTableData() {
            return this.tableData;
        }
        
        public Double getXFactor() {
            return this.xFactor;
        }
        
        public Double getYFactor() {
            return this.yFactor;
        }
        
        public Double getZFactor() {
            return this.zFactor;
        }
    }
    
    @JsonInclude(Include.NON_NULL)
    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class UpdateBody {
        
        private final long id;
        private final double carat;
        private final String clarity;
        private final String color;
        private final String cutType;
        private final Double depth;
        private final Double price;
        private final Double tableData;
        private final Double xFactor;
        private final Double yFactor;
        private final Double zFactor;
        
        @JsonCreator
        public UpdateBody(
                @JsonProperty("id") Long id,
                @JsonProperty("carat") Double carat,
                @JsonProperty("clarity") String clarity,
                @JsonProperty("color") String color,
                @JsonProperty("cutType") String cutType,
                @JsonProperty("depth") Double depth,
                @JsonProperty("price") Double price,
                @JsonProperty("tableData") Double tableData,
                @JsonProperty("xFactor") Double xFactor,
                @JsonProperty("yFactor") Double yFactor,
                @JsonProperty("zFactor") Double zFactor) {
            this.id = Objects.requireNonNull(id, "`id` is required");
            this.carat = Objects.requireNonNull(carat, "`carat` is required");
            this.clarity = Objects.requireNonNull(clarity, "`clarity` is required");
            this.color = Objects.requireNonNull(color, "`color` is required");
            this.cutType = Objects.requireNonNull(cutType, "`cutType` is required");
            this.depth = Objects.requireNonNull(depth, "`depth` is required");
            this.price = Objects.requireNonNull(price, "`price` is required");
            this.tableData = Objects.requireNonNull(tableData, "`tableData` is required");
            this.xFactor = Objects.requireNonNull(xFactor, "`xFactor` is required");
            this.yFactor = Objects.requireNonNull(yFactor, "`yFactor` is required");
            this.zFactor = Objects.requireNonNull(zFactor, "`zFactor` is required");
        }
        
        public long getId() {
            return this.id;
        }
        
        public double getCarat() {
            return this.carat;
        }
        
        public String getClarity() {
            return this.clarity;
        }
        
        public String getColor() {
            return this.color;
        }
        
        public String getCutType() {
            return this.cutType;
        }
        
        public Double getDepth() {
            return this.depth;
        }
        
        public Double getPrice() {
            return this.price;
        }
        
        public Double getTableData() {
            return this.tableData;
        }
        
        public Double getXFactor() {
            return this.xFactor;
        }
        
        public Double getYFactor() {
            return this.yFactor;
        }
        
        public Double getZFactor() {
            return this.zFactor;
        }
    }
}