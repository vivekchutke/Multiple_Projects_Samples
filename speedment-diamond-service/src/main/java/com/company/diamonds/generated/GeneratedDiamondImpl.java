package com.company.diamonds.generated;

import com.company.diamonds.Diamond;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.core.util.OptionalUtil;

import java.util.Objects;
import java.util.Optional;
import java.util.OptionalDouble;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * com.company.diamonds.Diamond}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedDiamondImpl implements Diamond {
    
    private long id;
    private double carat;
    private String clarity;
    private String color;
    private String cutType;
    private Double depth;
    private Double price;
    private Double tableData;
    private Double xFactor;
    private Double yFactor;
    private Double zFactor;
    
    protected GeneratedDiamondImpl() {}
    
    @Override
    public long getId() {
        return id;
    }
    
    @Override
    public double getCarat() {
        return carat;
    }
    
    @Override
    public Optional<String> getClarity() {
        return Optional.ofNullable(clarity);
    }
    
    @Override
    public Optional<String> getColor() {
        return Optional.ofNullable(color);
    }
    
    @Override
    public Optional<String> getCutType() {
        return Optional.ofNullable(cutType);
    }
    
    @Override
    public OptionalDouble getDepth() {
        return OptionalUtil.ofNullable(depth);
    }
    
    @Override
    public OptionalDouble getPrice() {
        return OptionalUtil.ofNullable(price);
    }
    
    @Override
    public OptionalDouble getTableData() {
        return OptionalUtil.ofNullable(tableData);
    }
    
    @Override
    public OptionalDouble getXFactor() {
        return OptionalUtil.ofNullable(xFactor);
    }
    
    @Override
    public OptionalDouble getYFactor() {
        return OptionalUtil.ofNullable(yFactor);
    }
    
    @Override
    public OptionalDouble getZFactor() {
        return OptionalUtil.ofNullable(zFactor);
    }
    
    @Override
    public Diamond setId(long id) {
        this.id = id;
        return this;
    }
    
    @Override
    public Diamond setCarat(double carat) {
        this.carat = carat;
        return this;
    }
    
    @Override
    public Diamond setClarity(String clarity) {
        this.clarity = clarity;
        return this;
    }
    
    @Override
    public Diamond setColor(String color) {
        this.color = color;
        return this;
    }
    
    @Override
    public Diamond setCutType(String cutType) {
        this.cutType = cutType;
        return this;
    }
    
    @Override
    public Diamond setDepth(Double depth) {
        this.depth = depth;
        return this;
    }
    
    @Override
    public Diamond setPrice(Double price) {
        this.price = price;
        return this;
    }
    
    @Override
    public Diamond setTableData(Double tableData) {
        this.tableData = tableData;
        return this;
    }
    
    @Override
    public Diamond setXFactor(Double xFactor) {
        this.xFactor = xFactor;
        return this;
    }
    
    @Override
    public Diamond setYFactor(Double yFactor) {
        this.yFactor = yFactor;
        return this;
    }
    
    @Override
    public Diamond setZFactor(Double zFactor) {
        this.zFactor = zFactor;
        return this;
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("id = "        + Objects.toString(getId()));
        sj.add("carat = "     + Objects.toString(getCarat()));
        sj.add("clarity = "   + Objects.toString(OptionalUtil.unwrap(getClarity())));
        sj.add("color = "     + Objects.toString(OptionalUtil.unwrap(getColor())));
        sj.add("cutType = "   + Objects.toString(OptionalUtil.unwrap(getCutType())));
        sj.add("depth = "     + Objects.toString(OptionalUtil.unwrap(getDepth())));
        sj.add("price = "     + Objects.toString(OptionalUtil.unwrap(getPrice())));
        sj.add("tableData = " + Objects.toString(OptionalUtil.unwrap(getTableData())));
        sj.add("xFactor = "   + Objects.toString(OptionalUtil.unwrap(getXFactor())));
        sj.add("yFactor = "   + Objects.toString(OptionalUtil.unwrap(getYFactor())));
        sj.add("zFactor = "   + Objects.toString(OptionalUtil.unwrap(getZFactor())));
        return "DiamondImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof Diamond)) { return false; }
        final Diamond thatDiamond = (Diamond)that;
        if (this.getId() != thatDiamond.getId()) { return false; }
        if (this.getCarat() != thatDiamond.getCarat()) { return false; }
        if (!Objects.equals(this.getClarity(), thatDiamond.getClarity())) { return false; }
        if (!Objects.equals(this.getColor(), thatDiamond.getColor())) { return false; }
        if (!Objects.equals(this.getCutType(), thatDiamond.getCutType())) { return false; }
        if (!Objects.equals(this.getDepth(), thatDiamond.getDepth())) { return false; }
        if (!Objects.equals(this.getPrice(), thatDiamond.getPrice())) { return false; }
        if (!Objects.equals(this.getTableData(), thatDiamond.getTableData())) { return false; }
        if (!Objects.equals(this.getXFactor(), thatDiamond.getXFactor())) { return false; }
        if (!Objects.equals(this.getYFactor(), thatDiamond.getYFactor())) { return false; }
        if (!Objects.equals(this.getZFactor(), thatDiamond.getZFactor())) { return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Long.hashCode(getId());
        hash = 31 * hash + Double.hashCode(getCarat());
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getClarity()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getColor()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getCutType()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getDepth()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getPrice()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getTableData()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getXFactor()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getYFactor()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getZFactor()));
        return hash;
    }
}