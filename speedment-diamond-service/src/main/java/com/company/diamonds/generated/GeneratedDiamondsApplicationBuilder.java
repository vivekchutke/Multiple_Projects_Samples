package com.company.diamonds.generated;

import com.company.allergens.AllergensManagerImpl;
import com.company.allergens.AllergensSqlAdapter;
import com.company.diamonds.DiamondManagerImpl;
import com.company.diamonds.DiamondSqlAdapter;
import com.company.diamonds.DiamondsApplication;
import com.company.diamonds.DiamondsApplicationBuilder;
import com.company.diamonds.DiamondsApplicationImpl;
import com.company.diamonds.DiamondsCacheReloader;
import com.company.diamonds.DiamondsInjectorProxy;
import com.company.diamonds.diamonds.diamonds.hibernate_sequence.HibernateSequenceManagerImpl;
import com.company.diamonds.diamonds.diamonds.hibernate_sequence.HibernateSequenceSqlAdapter;
import com.company.mealse.MealseManagerImpl;
import com.company.mealse.MealseSqlAdapter;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.common.injector.Injector;
import com.speedment.runtime.application.AbstractApplicationBuilder;
import com.speedment.runtime.connector.mysql.MySqlBundle;

/**
 * A generated base {@link
 * com.speedment.runtime.application.AbstractApplicationBuilder} class for the
 * {@link com.speedment.runtime.config.Project} named diamonds.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedDiamondsApplicationBuilder extends AbstractApplicationBuilder<DiamondsApplication, DiamondsApplicationBuilder> {
    
    protected GeneratedDiamondsApplicationBuilder() {
        super(DiamondsApplicationImpl.class, GeneratedDiamondsMetadata.class);
        withManager(AllergensManagerImpl.class);
        withManager(DiamondManagerImpl.class);
        withManager(HibernateSequenceManagerImpl.class);
        withManager(MealseManagerImpl.class);
        withComponent(AllergensSqlAdapter.class);
        withComponent(DiamondSqlAdapter.class);
        withComponent(HibernateSequenceSqlAdapter.class);
        withComponent(MealseSqlAdapter.class);
        withBundle(MySqlBundle.class);
        withInjectorProxy(new DiamondsInjectorProxy());
        withComponent(DiamondsCacheReloader.class);
    }
    
    @Override
    public DiamondsApplication build(Injector injector) {
        return injector.getOrThrow(DiamondsApplication.class);
    }
}