package com.company.diamonds.generated;

import com.company.allergens.generated.GeneratedAllergensCacheHolder;
import com.company.diamonds.diamonds.diamonds.hibernate_sequence.generated.GeneratedHibernateSequenceCacheHolder;
import com.company.mealse.generated.GeneratedMealseCacheHolder;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.enterprise.datastore.runtime.DataStoreHolder;
import com.speedment.enterprise.datastore.runtime.DataStoreReloader;
import com.speedment.enterprise.datastore.runtime.util.DataStoreHolderUtil;
import com.speedment.runtime.core.component.StreamSupplierComponent;

import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;

/**
 * A reloader that loads updates from a stream source and creates a new holder
 * for that state.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedDiamondsCacheReloader implements DataStoreReloader {
    
    @Override
    public DataStoreHolder reload(StreamSupplierComponent streamSupplier, ExecutorService executor) {
        final CompletableFuture<GeneratedAllergensCacheHolder> allergensHolder                  = GeneratedAllergensCacheHolder.reload(streamSupplier, executor);
        final CompletableFuture<GeneratedDiamondCacheHolder> diamondHolder                      = GeneratedDiamondCacheHolder.reload(streamSupplier, executor);
        final CompletableFuture<GeneratedHibernateSequenceCacheHolder> hibernateSequenceHolder  = GeneratedHibernateSequenceCacheHolder.reload(streamSupplier, executor);
        final CompletableFuture<GeneratedMealseCacheHolder> mealseHolder                        = GeneratedMealseCacheHolder.reload(streamSupplier, executor);
        
        final DataStoreHolder holder;
        try {
            holder = new GeneratedDiamondsDataStoreHolder(
                allergensHolder.get(),
                diamondHolder.get(),
                hibernateSequenceHolder.get(),
                mealseHolder.get()
            );
        } catch (final ExecutionException | InterruptedException ex) {
            throw new RuntimeException("Error reloading caches.", ex);
        }
        
        DataStoreHolderUtil.decorateEntityStores(holder, executor);
        return holder;
    }
}